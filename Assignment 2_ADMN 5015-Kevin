{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1Q0HQ3p1vd418U_hLnG_8MUohUdsRZn44",
      "authorship_tag": "ABX9TyNqcb/peRPdqPwrpMd1F+sF",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ABKevin/Customer-churn-dataset/blob/main/Assignment%202_ADMN%205015-Kevin\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "gWMy14hpwy9F"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "import time\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import mean_squared_error\n",
        "from sklearn.model_selection import RepeatedStratifiedKFold\n",
        "from sklearn.model_selection import GridSearchCV, RandomizedSearchCV\n",
        "from sklearn.model_selection import cross_val_score\n",
        "from xgboost import XGBRegressor\n",
        "from sklearn.tree import DecisionTreeRegressor\n",
        "from sklearn.gaussian_process import GaussianProcessRegressor\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.linear_model import Ridge\n",
        "from sklearn.linear_model import Lars\n",
        "from sklearn.linear_model import TheilSenRegressor\n",
        "from sklearn.linear_model import HuberRegressor\n",
        "from sklearn.linear_model import PassiveAggressiveRegressor\n",
        "from sklearn.linear_model import ARDRegression\n",
        "from sklearn.linear_model import BayesianRidge\n",
        "from sklearn.linear_model import ElasticNet\n",
        "from sklearn.linear_model import OrthogonalMatchingPursuit\n",
        "from sklearn.svm import SVR\n",
        "from sklearn.svm import NuSVR\n",
        "from sklearn.svm import LinearSVR\n",
        "from sklearn.kernel_ridge import KernelRidge\n",
        "from sklearn.isotonic import IsotonicRegression\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from bs4 import BeautifulSoup\n",
        "from lxml import etree\n",
        "import requests\n",
        "import datetime\n",
        "import csv\n",
        "from datetime import date, timedelta"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install tensorflow tensorflow_decision_forests"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dQXJBc6f-YIc",
        "outputId": "2cd681da-b1bf-43e3-c7b2-ea10478a93b4"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n",
            "Requirement already satisfied: tensorflow in /usr/local/lib/python3.8/dist-packages (2.9.2)\n",
            "Requirement already satisfied: tensorflow_decision_forests in /usr/local/lib/python3.8/dist-packages (0.2.7)\n",
            "Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.8/dist-packages (from tensorflow) (1.51.1)\n",
            "Requirement already satisfied: h5py>=2.9.0 in /usr/local/lib/python3.8/dist-packages (from tensorflow) (3.1.0)\n",
            "Requirement already satisfied: gast<=0.4.0,>=0.2.1 in /usr/local/lib/python3.8/dist-packages (from tensorflow) (0.4.0)\n",
            "Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.8/dist-packages (from tensorflow) (1.6.3)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.8/dist-packages (from tensorflow) (21.3)\n",
            "Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.8/dist-packages (from tensorflow) (2.2.0)\n",
            "Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.8/dist-packages (from tensorflow) (0.2.0)\n",
            "Requirement already satisfied: tensorflow-estimator<2.10.0,>=2.9.0rc0 in /usr/local/lib/python3.8/dist-packages (from tensorflow) (2.9.0)\n",
            "Requirement already satisfied: numpy>=1.20 in /usr/local/lib/python3.8/dist-packages (from tensorflow) (1.21.6)\n",
            "Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.8/dist-packages (from tensorflow) (0.29.0)\n",
            "Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.8/dist-packages (from tensorflow) (4.4.0)\n",
            "Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.8/dist-packages (from tensorflow) (1.3.0)\n",
            "Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.8/dist-packages (from tensorflow) (3.3.0)\n",
            "Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.8/dist-packages (from tensorflow) (15.0.6.1)\n",
            "Requirement already satisfied: flatbuffers<2,>=1.12 in /usr/local/lib/python3.8/dist-packages (from tensorflow) (1.12)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.8/dist-packages (from tensorflow) (57.4.0)\n",
            "Requirement already satisfied: tensorboard<2.10,>=2.9 in /usr/local/lib/python3.8/dist-packages (from tensorflow) (2.9.1)\n",
            "Requirement already satisfied: keras<2.10.0,>=2.9.0rc0 in /usr/local/lib/python3.8/dist-packages (from tensorflow) (2.9.0)\n",
            "Requirement already satisfied: protobuf<3.20,>=3.9.2 in /usr/local/lib/python3.8/dist-packages (from tensorflow) (3.19.6)\n",
            "Requirement already satisfied: keras-preprocessing>=1.1.1 in /usr/local/lib/python3.8/dist-packages (from tensorflow) (1.1.2)\n",
            "Requirement already satisfied: wrapt>=1.11.0 in /usr/local/lib/python3.8/dist-packages (from tensorflow) (1.14.1)\n",
            "Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.8/dist-packages (from tensorflow) (1.15.0)\n",
            "Requirement already satisfied: wurlitzer in /usr/local/lib/python3.8/dist-packages (from tensorflow_decision_forests) (3.0.3)\n",
            "Requirement already satisfied: wheel in /usr/local/lib/python3.8/dist-packages (from tensorflow_decision_forests) (0.38.4)\n",
            "Requirement already satisfied: pandas in /usr/local/lib/python3.8/dist-packages (from tensorflow_decision_forests) (1.3.5)\n",
            "Requirement already satisfied: google-auth<3,>=1.6.3 in /usr/local/lib/python3.8/dist-packages (from tensorboard<2.10,>=2.9->tensorflow) (2.16.0)\n",
            "Requirement already satisfied: tensorboard-plugin-wit>=1.6.0 in /usr/local/lib/python3.8/dist-packages (from tensorboard<2.10,>=2.9->tensorflow) (1.8.1)\n",
            "Requirement already satisfied: tensorboard-data-server<0.7.0,>=0.6.0 in /usr/local/lib/python3.8/dist-packages (from tensorboard<2.10,>=2.9->tensorflow) (0.6.1)\n",
            "Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.8/dist-packages (from tensorboard<2.10,>=2.9->tensorflow) (3.4.1)\n",
            "Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.8/dist-packages (from tensorboard<2.10,>=2.9->tensorflow) (2.25.1)\n",
            "Requirement already satisfied: google-auth-oauthlib<0.5,>=0.4.1 in /usr/local/lib/python3.8/dist-packages (from tensorboard<2.10,>=2.9->tensorflow) (0.4.6)\n",
            "Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.8/dist-packages (from tensorboard<2.10,>=2.9->tensorflow) (1.0.1)\n",
            "Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.8/dist-packages (from packaging->tensorflow) (3.0.9)\n",
            "Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.8/dist-packages (from pandas->tensorflow_decision_forests) (2022.7)\n",
            "Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.8/dist-packages (from pandas->tensorflow_decision_forests) (2.8.2)\n",
            "Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.8/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.10,>=2.9->tensorflow) (5.2.1)\n",
            "Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.8/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.10,>=2.9->tensorflow) (0.2.8)\n",
            "Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.8/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.10,>=2.9->tensorflow) (4.9)\n",
            "Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.8/dist-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.10,>=2.9->tensorflow) (1.3.1)\n",
            "Requirement already satisfied: importlib-metadata>=4.4 in /usr/local/lib/python3.8/dist-packages (from markdown>=2.6.8->tensorboard<2.10,>=2.9->tensorflow) (6.0.0)\n",
            "Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.8/dist-packages (from requests<3,>=2.21.0->tensorboard<2.10,>=2.9->tensorflow) (2.10)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.8/dist-packages (from requests<3,>=2.21.0->tensorboard<2.10,>=2.9->tensorflow) (2022.12.7)\n",
            "Requirement already satisfied: chardet<5,>=3.0.2 in /usr/local/lib/python3.8/dist-packages (from requests<3,>=2.21.0->tensorboard<2.10,>=2.9->tensorflow) (4.0.0)\n",
            "Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.8/dist-packages (from requests<3,>=2.21.0->tensorboard<2.10,>=2.9->tensorflow) (1.24.3)\n",
            "Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.8/dist-packages (from importlib-metadata>=4.4->markdown>=2.6.8->tensorboard<2.10,>=2.9->tensorflow) (3.11.0)\n",
            "Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in /usr/local/lib/python3.8/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.10,>=2.9->tensorflow) (0.4.8)\n",
            "Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.8/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.10,>=2.9->tensorflow) (3.2.2)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Load TF-DF\n",
        "import tensorflow_decision_forests as tfdf"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jhKZKPJ1-nbv",
        "outputId": "6fa11445-2458-44a0-8999-e30dded42a2f"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:root:TensorFlow Decision Forests 0.2.7 is compatible with the following TensorFlow Versions: ['2.9.1']. However, TensorFlow 2.9.2 was detected. This can cause issues with the TF API and symbols in the custom C++ ops. See the TF and TF-DF compatibility table at https://github.com/tensorflow/decision-forests/blob/main/documentation/known_issues.md#compatibility-table.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pd.options.mode.chained_assignment = None \n",
        "# default='warn'"
      ],
      "metadata": {
        "id": "wSFRdvIl2DKn"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Uploading Training dataset file\n",
        "df_training = pd.read_csv('https://raw.githubusercontent.com/ABKevin/Customer-churn-dataset/main/churn-bigml-80.csv')\n",
        "df_training.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 305
        },
        "id": "z7jWJppCxi3c",
        "outputId": "cdbfbb65-670a-498b-dcff-0b1ae888befb"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  State  Account length  Area code International plan Voice mail plan  \\\n",
              "0    KS             128        415                 No             Yes   \n",
              "1    OH             107        415                 No             Yes   \n",
              "2    NJ             137        415                 No              No   \n",
              "3    OH              84        408                Yes              No   \n",
              "4    OK              75        415                Yes              No   \n",
              "\n",
              "   Number vmail messages  Total day minutes  Total day calls  \\\n",
              "0                     25              265.1              110   \n",
              "1                     26              161.6              123   \n",
              "2                      0              243.4              114   \n",
              "3                      0              299.4               71   \n",
              "4                      0              166.7              113   \n",
              "\n",
              "   Total day charge  Total eve minutes  Total eve calls  Total eve charge  \\\n",
              "0             45.07              197.4               99             16.78   \n",
              "1             27.47              195.5              103             16.62   \n",
              "2             41.38              121.2              110             10.30   \n",
              "3             50.90               61.9               88              5.26   \n",
              "4             28.34              148.3              122             12.61   \n",
              "\n",
              "   Total night minutes  Total night calls  Total night charge  \\\n",
              "0                244.7                 91               11.01   \n",
              "1                254.4                103               11.45   \n",
              "2                162.6                104                7.32   \n",
              "3                196.9                 89                8.86   \n",
              "4                186.9                121                8.41   \n",
              "\n",
              "   Total intl minutes  Total intl calls  Total intl charge  \\\n",
              "0                10.0                 3               2.70   \n",
              "1                13.7                 3               3.70   \n",
              "2                12.2                 5               3.29   \n",
              "3                 6.6                 7               1.78   \n",
              "4                10.1                 3               2.73   \n",
              "\n",
              "   Customer service calls  Churn  \n",
              "0                       1  False  \n",
              "1                       1  False  \n",
              "2                       0  False  \n",
              "3                       2  False  \n",
              "4                       3  False  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bf5b70d0-c8d2-473e-a1e8-4262f8509e91\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>State</th>\n",
              "      <th>Account length</th>\n",
              "      <th>Area code</th>\n",
              "      <th>International plan</th>\n",
              "      <th>Voice mail plan</th>\n",
              "      <th>Number vmail messages</th>\n",
              "      <th>Total day minutes</th>\n",
              "      <th>Total day calls</th>\n",
              "      <th>Total day charge</th>\n",
              "      <th>Total eve minutes</th>\n",
              "      <th>Total eve calls</th>\n",
              "      <th>Total eve charge</th>\n",
              "      <th>Total night minutes</th>\n",
              "      <th>Total night calls</th>\n",
              "      <th>Total night charge</th>\n",
              "      <th>Total intl minutes</th>\n",
              "      <th>Total intl calls</th>\n",
              "      <th>Total intl charge</th>\n",
              "      <th>Customer service calls</th>\n",
              "      <th>Churn</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>KS</td>\n",
              "      <td>128</td>\n",
              "      <td>415</td>\n",
              "      <td>No</td>\n",
              "      <td>Yes</td>\n",
              "      <td>25</td>\n",
              "      <td>265.1</td>\n",
              "      <td>110</td>\n",
              "      <td>45.07</td>\n",
              "      <td>197.4</td>\n",
              "      <td>99</td>\n",
              "      <td>16.78</td>\n",
              "      <td>244.7</td>\n",
              "      <td>91</td>\n",
              "      <td>11.01</td>\n",
              "      <td>10.0</td>\n",
              "      <td>3</td>\n",
              "      <td>2.70</td>\n",
              "      <td>1</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>OH</td>\n",
              "      <td>107</td>\n",
              "      <td>415</td>\n",
              "      <td>No</td>\n",
              "      <td>Yes</td>\n",
              "      <td>26</td>\n",
              "      <td>161.6</td>\n",
              "      <td>123</td>\n",
              "      <td>27.47</td>\n",
              "      <td>195.5</td>\n",
              "      <td>103</td>\n",
              "      <td>16.62</td>\n",
              "      <td>254.4</td>\n",
              "      <td>103</td>\n",
              "      <td>11.45</td>\n",
              "      <td>13.7</td>\n",
              "      <td>3</td>\n",
              "      <td>3.70</td>\n",
              "      <td>1</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>NJ</td>\n",
              "      <td>137</td>\n",
              "      <td>415</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>243.4</td>\n",
              "      <td>114</td>\n",
              "      <td>41.38</td>\n",
              "      <td>121.2</td>\n",
              "      <td>110</td>\n",
              "      <td>10.30</td>\n",
              "      <td>162.6</td>\n",
              "      <td>104</td>\n",
              "      <td>7.32</td>\n",
              "      <td>12.2</td>\n",
              "      <td>5</td>\n",
              "      <td>3.29</td>\n",
              "      <td>0</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>OH</td>\n",
              "      <td>84</td>\n",
              "      <td>408</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>299.4</td>\n",
              "      <td>71</td>\n",
              "      <td>50.90</td>\n",
              "      <td>61.9</td>\n",
              "      <td>88</td>\n",
              "      <td>5.26</td>\n",
              "      <td>196.9</td>\n",
              "      <td>89</td>\n",
              "      <td>8.86</td>\n",
              "      <td>6.6</td>\n",
              "      <td>7</td>\n",
              "      <td>1.78</td>\n",
              "      <td>2</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>OK</td>\n",
              "      <td>75</td>\n",
              "      <td>415</td>\n",
              "      <td>Yes</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>166.7</td>\n",
              "      <td>113</td>\n",
              "      <td>28.34</td>\n",
              "      <td>148.3</td>\n",
              "      <td>122</td>\n",
              "      <td>12.61</td>\n",
              "      <td>186.9</td>\n",
              "      <td>121</td>\n",
              "      <td>8.41</td>\n",
              "      <td>10.1</td>\n",
              "      <td>3</td>\n",
              "      <td>2.73</td>\n",
              "      <td>3</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bf5b70d0-c8d2-473e-a1e8-4262f8509e91')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-bf5b70d0-c8d2-473e-a1e8-4262f8509e91 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-bf5b70d0-c8d2-473e-a1e8-4262f8509e91');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Data types\n",
        "df_training.dtypes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "97TMO5MRUrHA",
        "outputId": "d4ac1bc3-7110-4079-9834-65a40c7b3af7"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "State                      object\n",
              "Account length              int64\n",
              "Area code                   int64\n",
              "International plan         object\n",
              "Voice mail plan            object\n",
              "Number vmail messages       int64\n",
              "Total day minutes         float64\n",
              "Total day calls             int64\n",
              "Total day charge          float64\n",
              "Total eve minutes         float64\n",
              "Total eve calls             int64\n",
              "Total eve charge          float64\n",
              "Total night minutes       float64\n",
              "Total night calls           int64\n",
              "Total night charge        float64\n",
              "Total intl minutes        float64\n",
              "Total intl calls            int64\n",
              "Total intl charge         float64\n",
              "Customer service calls      int64\n",
              "Churn                        bool\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_training.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "51GszEYcUypz",
        "outputId": "32ff7e54-43c7-4ec3-d950-9195c871487f"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "State                     0\n",
              "Account length            0\n",
              "Area code                 0\n",
              "International plan        0\n",
              "Voice mail plan           0\n",
              "Number vmail messages     0\n",
              "Total day minutes         0\n",
              "Total day calls           0\n",
              "Total day charge          0\n",
              "Total eve minutes         0\n",
              "Total eve calls           0\n",
              "Total eve charge          0\n",
              "Total night minutes       0\n",
              "Total night calls         0\n",
              "Total night charge        0\n",
              "Total intl minutes        0\n",
              "Total intl calls          0\n",
              "Total intl charge         0\n",
              "Customer service calls    0\n",
              "Churn                     0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_training.describe().T"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 551
        },
        "id": "lAS39fyrVx08",
        "outputId": "c8e726e8-627b-4468-aac3-32f14ec8be0d"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                         count        mean        std     min     25%     50%  \\\n",
              "Account length          2661.0  100.602405  39.575251    1.00   73.00  100.00   \n",
              "Area code               2661.0  437.486283  42.546608  408.00  408.00  415.00   \n",
              "Number vmail messages   2661.0    7.998121  13.593356    0.00    0.00    0.00   \n",
              "Total day minutes       2661.0  179.459602  54.221534    0.00  143.40  179.90   \n",
              "Total day calls         2661.0  100.289365  19.976125    0.00   87.00  101.00   \n",
              "Total day charge        2661.0   30.508658   9.217631    0.00   24.38   30.58   \n",
              "Total eve minutes       2661.0  200.393912  50.975379    0.00  165.30  200.90   \n",
              "Total eve calls         2661.0  100.030440  20.151499    0.00   87.00  100.00   \n",
              "Total eve charge        2661.0   17.033728   4.332893    0.00   14.05   17.08   \n",
              "Total night minutes     2661.0  201.124652  50.777663   43.70  166.90  201.10   \n",
              "Total night calls       2661.0  100.118377  19.406027   33.00   87.00  100.00   \n",
              "Total night charge      2661.0    9.050695   2.285002    1.97    7.51    9.05   \n",
              "Total intl minutes      2661.0   10.238670   2.788170    0.00    8.50   10.20   \n",
              "Total intl calls        2661.0    4.465990   2.456247    0.00    3.00    4.00   \n",
              "Total intl charge       2661.0    2.764934   0.752765    0.00    2.30    2.75   \n",
              "Customer service calls  2661.0    1.561067   1.310072    0.00    1.00    1.00   \n",
              "\n",
              "                           75%     max  \n",
              "Account length          127.00  243.00  \n",
              "Area code               510.00  510.00  \n",
              "Number vmail messages    19.00   50.00  \n",
              "Total day minutes       215.90  350.80  \n",
              "Total day calls         114.00  160.00  \n",
              "Total day charge         36.70   59.64  \n",
              "Total eve minutes       235.10  363.70  \n",
              "Total eve calls         114.00  170.00  \n",
              "Total eve charge         19.98   30.91  \n",
              "Total night minutes     236.40  395.00  \n",
              "Total night calls       113.00  166.00  \n",
              "Total night charge       10.64   17.77  \n",
              "Total intl minutes       12.10   20.00  \n",
              "Total intl calls          6.00   20.00  \n",
              "Total intl charge         3.27    5.40  \n",
              "Customer service calls    2.00    9.00  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a43d8287-28a1-4d9b-8bfb-5ceaecc05cf2\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "      <th>mean</th>\n",
              "      <th>std</th>\n",
              "      <th>min</th>\n",
              "      <th>25%</th>\n",
              "      <th>50%</th>\n",
              "      <th>75%</th>\n",
              "      <th>max</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Account length</th>\n",
              "      <td>2661.0</td>\n",
              "      <td>100.602405</td>\n",
              "      <td>39.575251</td>\n",
              "      <td>1.00</td>\n",
              "      <td>73.00</td>\n",
              "      <td>100.00</td>\n",
              "      <td>127.00</td>\n",
              "      <td>243.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Area code</th>\n",
              "      <td>2661.0</td>\n",
              "      <td>437.486283</td>\n",
              "      <td>42.546608</td>\n",
              "      <td>408.00</td>\n",
              "      <td>408.00</td>\n",
              "      <td>415.00</td>\n",
              "      <td>510.00</td>\n",
              "      <td>510.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Number vmail messages</th>\n",
              "      <td>2661.0</td>\n",
              "      <td>7.998121</td>\n",
              "      <td>13.593356</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>19.00</td>\n",
              "      <td>50.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Total day minutes</th>\n",
              "      <td>2661.0</td>\n",
              "      <td>179.459602</td>\n",
              "      <td>54.221534</td>\n",
              "      <td>0.00</td>\n",
              "      <td>143.40</td>\n",
              "      <td>179.90</td>\n",
              "      <td>215.90</td>\n",
              "      <td>350.80</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Total day calls</th>\n",
              "      <td>2661.0</td>\n",
              "      <td>100.289365</td>\n",
              "      <td>19.976125</td>\n",
              "      <td>0.00</td>\n",
              "      <td>87.00</td>\n",
              "      <td>101.00</td>\n",
              "      <td>114.00</td>\n",
              "      <td>160.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Total day charge</th>\n",
              "      <td>2661.0</td>\n",
              "      <td>30.508658</td>\n",
              "      <td>9.217631</td>\n",
              "      <td>0.00</td>\n",
              "      <td>24.38</td>\n",
              "      <td>30.58</td>\n",
              "      <td>36.70</td>\n",
              "      <td>59.64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Total eve minutes</th>\n",
              "      <td>2661.0</td>\n",
              "      <td>200.393912</td>\n",
              "      <td>50.975379</td>\n",
              "      <td>0.00</td>\n",
              "      <td>165.30</td>\n",
              "      <td>200.90</td>\n",
              "      <td>235.10</td>\n",
              "      <td>363.70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Total eve calls</th>\n",
              "      <td>2661.0</td>\n",
              "      <td>100.030440</td>\n",
              "      <td>20.151499</td>\n",
              "      <td>0.00</td>\n",
              "      <td>87.00</td>\n",
              "      <td>100.00</td>\n",
              "      <td>114.00</td>\n",
              "      <td>170.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Total eve charge</th>\n",
              "      <td>2661.0</td>\n",
              "      <td>17.033728</td>\n",
              "      <td>4.332893</td>\n",
              "      <td>0.00</td>\n",
              "      <td>14.05</td>\n",
              "      <td>17.08</td>\n",
              "      <td>19.98</td>\n",
              "      <td>30.91</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Total night minutes</th>\n",
              "      <td>2661.0</td>\n",
              "      <td>201.124652</td>\n",
              "      <td>50.777663</td>\n",
              "      <td>43.70</td>\n",
              "      <td>166.90</td>\n",
              "      <td>201.10</td>\n",
              "      <td>236.40</td>\n",
              "      <td>395.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Total night calls</th>\n",
              "      <td>2661.0</td>\n",
              "      <td>100.118377</td>\n",
              "      <td>19.406027</td>\n",
              "      <td>33.00</td>\n",
              "      <td>87.00</td>\n",
              "      <td>100.00</td>\n",
              "      <td>113.00</td>\n",
              "      <td>166.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Total night charge</th>\n",
              "      <td>2661.0</td>\n",
              "      <td>9.050695</td>\n",
              "      <td>2.285002</td>\n",
              "      <td>1.97</td>\n",
              "      <td>7.51</td>\n",
              "      <td>9.05</td>\n",
              "      <td>10.64</td>\n",
              "      <td>17.77</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Total intl minutes</th>\n",
              "      <td>2661.0</td>\n",
              "      <td>10.238670</td>\n",
              "      <td>2.788170</td>\n",
              "      <td>0.00</td>\n",
              "      <td>8.50</td>\n",
              "      <td>10.20</td>\n",
              "      <td>12.10</td>\n",
              "      <td>20.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Total intl calls</th>\n",
              "      <td>2661.0</td>\n",
              "      <td>4.465990</td>\n",
              "      <td>2.456247</td>\n",
              "      <td>0.00</td>\n",
              "      <td>3.00</td>\n",
              "      <td>4.00</td>\n",
              "      <td>6.00</td>\n",
              "      <td>20.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Total intl charge</th>\n",
              "      <td>2661.0</td>\n",
              "      <td>2.764934</td>\n",
              "      <td>0.752765</td>\n",
              "      <td>0.00</td>\n",
              "      <td>2.30</td>\n",
              "      <td>2.75</td>\n",
              "      <td>3.27</td>\n",
              "      <td>5.40</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Customer service calls</th>\n",
              "      <td>2661.0</td>\n",
              "      <td>1.561067</td>\n",
              "      <td>1.310072</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>2.00</td>\n",
              "      <td>9.00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a43d8287-28a1-4d9b-8bfb-5ceaecc05cf2')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a43d8287-28a1-4d9b-8bfb-5ceaecc05cf2 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a43d8287-28a1-4d9b-8bfb-5ceaecc05cf2');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Uploading Testing dataset file\n",
        "df_test = pd.read_csv('https://raw.githubusercontent.com/ABKevin/Customer-churn-dataset/main/churn-bigml-20.csv')\n",
        "df_test.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 305
        },
        "id": "eBkaUNjK9qvT",
        "outputId": "e899d159-14dd-48f4-af8e-d9c389e4baec"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  State  Account length  Area code International plan Voice mail plan  \\\n",
              "0    LA             117        408                 No              No   \n",
              "1    IN              65        415                 No              No   \n",
              "2    NY             161        415                 No              No   \n",
              "3    SC             111        415                 No              No   \n",
              "4    HI              49        510                 No              No   \n",
              "\n",
              "   Number vmail messages  Total day minutes  Total day calls  \\\n",
              "0                      0              184.5               97   \n",
              "1                      0              129.1              137   \n",
              "2                      0              332.9               67   \n",
              "3                      0              110.4              103   \n",
              "4                      0              119.3              117   \n",
              "\n",
              "   Total day charge  Total eve minutes  Total eve calls  Total eve charge  \\\n",
              "0             31.37              351.6               80             29.89   \n",
              "1             21.95              228.5               83             19.42   \n",
              "2             56.59              317.8               97             27.01   \n",
              "3             18.77              137.3              102             11.67   \n",
              "4             20.28              215.1              109             18.28   \n",
              "\n",
              "   Total night minutes  Total night calls  Total night charge  \\\n",
              "0                215.8                 90                9.71   \n",
              "1                208.8                111                9.40   \n",
              "2                160.6                128                7.23   \n",
              "3                189.6                105                8.53   \n",
              "4                178.7                 90                8.04   \n",
              "\n",
              "   Total intl minutes  Total intl calls  Total intl charge  \\\n",
              "0                 8.7                 4               2.35   \n",
              "1                12.7                 6               3.43   \n",
              "2                 5.4                 9               1.46   \n",
              "3                 7.7                 6               2.08   \n",
              "4                11.1                 1               3.00   \n",
              "\n",
              "   Customer service calls  Churn  \n",
              "0                       1  False  \n",
              "1                       4   True  \n",
              "2                       4   True  \n",
              "3                       2  False  \n",
              "4                       1  False  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b6564161-43cb-4a45-a0a6-979051dd992f\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>State</th>\n",
              "      <th>Account length</th>\n",
              "      <th>Area code</th>\n",
              "      <th>International plan</th>\n",
              "      <th>Voice mail plan</th>\n",
              "      <th>Number vmail messages</th>\n",
              "      <th>Total day minutes</th>\n",
              "      <th>Total day calls</th>\n",
              "      <th>Total day charge</th>\n",
              "      <th>Total eve minutes</th>\n",
              "      <th>Total eve calls</th>\n",
              "      <th>Total eve charge</th>\n",
              "      <th>Total night minutes</th>\n",
              "      <th>Total night calls</th>\n",
              "      <th>Total night charge</th>\n",
              "      <th>Total intl minutes</th>\n",
              "      <th>Total intl calls</th>\n",
              "      <th>Total intl charge</th>\n",
              "      <th>Customer service calls</th>\n",
              "      <th>Churn</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>LA</td>\n",
              "      <td>117</td>\n",
              "      <td>408</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>184.5</td>\n",
              "      <td>97</td>\n",
              "      <td>31.37</td>\n",
              "      <td>351.6</td>\n",
              "      <td>80</td>\n",
              "      <td>29.89</td>\n",
              "      <td>215.8</td>\n",
              "      <td>90</td>\n",
              "      <td>9.71</td>\n",
              "      <td>8.7</td>\n",
              "      <td>4</td>\n",
              "      <td>2.35</td>\n",
              "      <td>1</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>IN</td>\n",
              "      <td>65</td>\n",
              "      <td>415</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>129.1</td>\n",
              "      <td>137</td>\n",
              "      <td>21.95</td>\n",
              "      <td>228.5</td>\n",
              "      <td>83</td>\n",
              "      <td>19.42</td>\n",
              "      <td>208.8</td>\n",
              "      <td>111</td>\n",
              "      <td>9.40</td>\n",
              "      <td>12.7</td>\n",
              "      <td>6</td>\n",
              "      <td>3.43</td>\n",
              "      <td>4</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>NY</td>\n",
              "      <td>161</td>\n",
              "      <td>415</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>332.9</td>\n",
              "      <td>67</td>\n",
              "      <td>56.59</td>\n",
              "      <td>317.8</td>\n",
              "      <td>97</td>\n",
              "      <td>27.01</td>\n",
              "      <td>160.6</td>\n",
              "      <td>128</td>\n",
              "      <td>7.23</td>\n",
              "      <td>5.4</td>\n",
              "      <td>9</td>\n",
              "      <td>1.46</td>\n",
              "      <td>4</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>SC</td>\n",
              "      <td>111</td>\n",
              "      <td>415</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>110.4</td>\n",
              "      <td>103</td>\n",
              "      <td>18.77</td>\n",
              "      <td>137.3</td>\n",
              "      <td>102</td>\n",
              "      <td>11.67</td>\n",
              "      <td>189.6</td>\n",
              "      <td>105</td>\n",
              "      <td>8.53</td>\n",
              "      <td>7.7</td>\n",
              "      <td>6</td>\n",
              "      <td>2.08</td>\n",
              "      <td>2</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>HI</td>\n",
              "      <td>49</td>\n",
              "      <td>510</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>119.3</td>\n",
              "      <td>117</td>\n",
              "      <td>20.28</td>\n",
              "      <td>215.1</td>\n",
              "      <td>109</td>\n",
              "      <td>18.28</td>\n",
              "      <td>178.7</td>\n",
              "      <td>90</td>\n",
              "      <td>8.04</td>\n",
              "      <td>11.1</td>\n",
              "      <td>1</td>\n",
              "      <td>3.00</td>\n",
              "      <td>1</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b6564161-43cb-4a45-a0a6-979051dd992f')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-b6564161-43cb-4a45-a0a6-979051dd992f button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-b6564161-43cb-4a45-a0a6-979051dd992f');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Data types\n",
        "df_test.dtypes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "--EuIaDUU2Bw",
        "outputId": "368404b6-747b-41f1-f6c5-b8fb0a0e6d39"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "State                      object\n",
              "Account length              int64\n",
              "Area code                   int64\n",
              "International plan         object\n",
              "Voice mail plan            object\n",
              "Number vmail messages       int64\n",
              "Total day minutes         float64\n",
              "Total day calls             int64\n",
              "Total day charge          float64\n",
              "Total eve minutes         float64\n",
              "Total eve calls             int64\n",
              "Total eve charge          float64\n",
              "Total night minutes       float64\n",
              "Total night calls           int64\n",
              "Total night charge        float64\n",
              "Total intl minutes        float64\n",
              "Total intl calls            int64\n",
              "Total intl charge         float64\n",
              "Customer service calls      int64\n",
              "Churn                        bool\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_test.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mThGc-iCVCn5",
        "outputId": "4ad83b5c-6653-4ec2-a036-283e04da2209"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "State                     0\n",
              "Account length            0\n",
              "Area code                 0\n",
              "International plan        0\n",
              "Voice mail plan           0\n",
              "Number vmail messages     0\n",
              "Total day minutes         0\n",
              "Total day calls           0\n",
              "Total day charge          0\n",
              "Total eve minutes         0\n",
              "Total eve calls           0\n",
              "Total eve charge          0\n",
              "Total night minutes       0\n",
              "Total night calls         0\n",
              "Total night charge        0\n",
              "Total intl minutes        0\n",
              "Total intl calls          0\n",
              "Total intl charge         0\n",
              "Customer service calls    0\n",
              "Churn                     0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_test.describe().T"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 551
        },
        "id": "k6SZhXyuVUfz",
        "outputId": "76c2fcdc-8894-4ac1-eef4-b84bd7e7d672"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                        count        mean        std     min     25%     50%  \\\n",
              "Account length          667.0  102.841079  40.819480    1.00   76.00  102.00   \n",
              "Area code               667.0  436.157421  41.783305  408.00  408.00  415.00   \n",
              "Number vmail messages   667.0    8.407796  13.994480    0.00    0.00    0.00   \n",
              "Total day minutes       667.0  180.948126  55.508628   25.90  146.25  178.30   \n",
              "Total day calls         667.0  100.937031  20.396790   30.00   87.50  101.00   \n",
              "Total day charge        667.0   30.761769   9.436463    4.40   24.86   30.31   \n",
              "Total eve minutes       667.0  203.355322  49.719268   48.10  171.05  203.70   \n",
              "Total eve calls         667.0  100.476762  18.948262   37.00   88.00  101.00   \n",
              "Total eve charge        667.0   17.285262   4.226160    4.09   14.54   17.31   \n",
              "Total night minutes     667.0  199.685307  49.759931   23.20  167.95  201.60   \n",
              "Total night calls       667.0  100.113943  20.172505   42.00   86.00  100.00   \n",
              "Total night charge      667.0    8.985907   2.239429    1.04    7.56    9.07   \n",
              "Total intl minutes      667.0   10.238381   2.807850    0.00    8.60   10.50   \n",
              "Total intl calls        667.0    4.527736   2.482442    0.00    3.00    4.00   \n",
              "Total intl charge       667.0    2.764948   0.758167    0.00    2.32    2.84   \n",
              "Customer service calls  667.0    1.563718   1.333357    0.00    1.00    1.00   \n",
              "\n",
              "                            75%     max  \n",
              "Account length          128.000  232.00  \n",
              "Area code               415.000  510.00  \n",
              "Number vmail messages    20.000   51.00  \n",
              "Total day minutes       220.700  334.30  \n",
              "Total day calls         115.000  165.00  \n",
              "Total day charge         37.520   56.83  \n",
              "Total eve minutes       236.450  361.80  \n",
              "Total eve calls         113.000  168.00  \n",
              "Total eve charge         20.095   30.75  \n",
              "Total night minutes     231.500  367.70  \n",
              "Total night calls       113.500  175.00  \n",
              "Total night charge       10.420   16.55  \n",
              "Total intl minutes       12.050   18.30  \n",
              "Total intl calls          6.000   18.00  \n",
              "Total intl charge         3.255    4.94  \n",
              "Customer service calls    2.000    8.00  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1991fb3f-8a7c-4828-b7d9-7e85f5eab55a\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "      <th>mean</th>\n",
              "      <th>std</th>\n",
              "      <th>min</th>\n",
              "      <th>25%</th>\n",
              "      <th>50%</th>\n",
              "      <th>75%</th>\n",
              "      <th>max</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Account length</th>\n",
              "      <td>667.0</td>\n",
              "      <td>102.841079</td>\n",
              "      <td>40.819480</td>\n",
              "      <td>1.00</td>\n",
              "      <td>76.00</td>\n",
              "      <td>102.00</td>\n",
              "      <td>128.000</td>\n",
              "      <td>232.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Area code</th>\n",
              "      <td>667.0</td>\n",
              "      <td>436.157421</td>\n",
              "      <td>41.783305</td>\n",
              "      <td>408.00</td>\n",
              "      <td>408.00</td>\n",
              "      <td>415.00</td>\n",
              "      <td>415.000</td>\n",
              "      <td>510.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Number vmail messages</th>\n",
              "      <td>667.0</td>\n",
              "      <td>8.407796</td>\n",
              "      <td>13.994480</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>20.000</td>\n",
              "      <td>51.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Total day minutes</th>\n",
              "      <td>667.0</td>\n",
              "      <td>180.948126</td>\n",
              "      <td>55.508628</td>\n",
              "      <td>25.90</td>\n",
              "      <td>146.25</td>\n",
              "      <td>178.30</td>\n",
              "      <td>220.700</td>\n",
              "      <td>334.30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Total day calls</th>\n",
              "      <td>667.0</td>\n",
              "      <td>100.937031</td>\n",
              "      <td>20.396790</td>\n",
              "      <td>30.00</td>\n",
              "      <td>87.50</td>\n",
              "      <td>101.00</td>\n",
              "      <td>115.000</td>\n",
              "      <td>165.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Total day charge</th>\n",
              "      <td>667.0</td>\n",
              "      <td>30.761769</td>\n",
              "      <td>9.436463</td>\n",
              "      <td>4.40</td>\n",
              "      <td>24.86</td>\n",
              "      <td>30.31</td>\n",
              "      <td>37.520</td>\n",
              "      <td>56.83</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Total eve minutes</th>\n",
              "      <td>667.0</td>\n",
              "      <td>203.355322</td>\n",
              "      <td>49.719268</td>\n",
              "      <td>48.10</td>\n",
              "      <td>171.05</td>\n",
              "      <td>203.70</td>\n",
              "      <td>236.450</td>\n",
              "      <td>361.80</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Total eve calls</th>\n",
              "      <td>667.0</td>\n",
              "      <td>100.476762</td>\n",
              "      <td>18.948262</td>\n",
              "      <td>37.00</td>\n",
              "      <td>88.00</td>\n",
              "      <td>101.00</td>\n",
              "      <td>113.000</td>\n",
              "      <td>168.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Total eve charge</th>\n",
              "      <td>667.0</td>\n",
              "      <td>17.285262</td>\n",
              "      <td>4.226160</td>\n",
              "      <td>4.09</td>\n",
              "      <td>14.54</td>\n",
              "      <td>17.31</td>\n",
              "      <td>20.095</td>\n",
              "      <td>30.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Total night minutes</th>\n",
              "      <td>667.0</td>\n",
              "      <td>199.685307</td>\n",
              "      <td>49.759931</td>\n",
              "      <td>23.20</td>\n",
              "      <td>167.95</td>\n",
              "      <td>201.60</td>\n",
              "      <td>231.500</td>\n",
              "      <td>367.70</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Total night calls</th>\n",
              "      <td>667.0</td>\n",
              "      <td>100.113943</td>\n",
              "      <td>20.172505</td>\n",
              "      <td>42.00</td>\n",
              "      <td>86.00</td>\n",
              "      <td>100.00</td>\n",
              "      <td>113.500</td>\n",
              "      <td>175.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Total night charge</th>\n",
              "      <td>667.0</td>\n",
              "      <td>8.985907</td>\n",
              "      <td>2.239429</td>\n",
              "      <td>1.04</td>\n",
              "      <td>7.56</td>\n",
              "      <td>9.07</td>\n",
              "      <td>10.420</td>\n",
              "      <td>16.55</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Total intl minutes</th>\n",
              "      <td>667.0</td>\n",
              "      <td>10.238381</td>\n",
              "      <td>2.807850</td>\n",
              "      <td>0.00</td>\n",
              "      <td>8.60</td>\n",
              "      <td>10.50</td>\n",
              "      <td>12.050</td>\n",
              "      <td>18.30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Total intl calls</th>\n",
              "      <td>667.0</td>\n",
              "      <td>4.527736</td>\n",
              "      <td>2.482442</td>\n",
              "      <td>0.00</td>\n",
              "      <td>3.00</td>\n",
              "      <td>4.00</td>\n",
              "      <td>6.000</td>\n",
              "      <td>18.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Total intl charge</th>\n",
              "      <td>667.0</td>\n",
              "      <td>2.764948</td>\n",
              "      <td>0.758167</td>\n",
              "      <td>0.00</td>\n",
              "      <td>2.32</td>\n",
              "      <td>2.84</td>\n",
              "      <td>3.255</td>\n",
              "      <td>4.94</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Customer service calls</th>\n",
              "      <td>667.0</td>\n",
              "      <td>1.563718</td>\n",
              "      <td>1.333357</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>2.000</td>\n",
              "      <td>8.00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1991fb3f-8a7c-4828-b7d9-7e85f5eab55a')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-1991fb3f-8a7c-4828-b7d9-7e85f5eab55a button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-1991fb3f-8a7c-4828-b7d9-7e85f5eab55a');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Convert the dataset into a TensorFlow dataset.\n",
        "train_ds = tfdf.keras.pd_dataframe_to_tf_dataset(df_training, label=\"Churn\")\n",
        "test_ds = tfdf.keras.pd_dataframe_to_tf_dataset(df_test, label=\"Churn\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f5WojjL19-Co",
        "outputId": "b4d6eb97-2635-46bb-953e-a20dd2368d87"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Warning: Some of the feature names have been changed automatically to be compatible with SavedModels because fix_feature_names=True.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:Some of the feature names have been changed automatically to be compatible with SavedModels because fix_feature_names=True.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Warning: Some of the feature names have been changed automatically to be compatible with SavedModels because fix_feature_names=True.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.8/dist-packages/tensorflow_decision_forests/keras/core.py:2574: FutureWarning: In a future version of pandas all arguments of DataFrame.drop except for the argument 'labels' will be keyword-only\n",
            "  features_dataframe = dataframe.drop(label, 1)\n",
            "WARNING:absl:Some of the feature names have been changed automatically to be compatible with SavedModels because fix_feature_names=True.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model = tfdf.keras.RandomForestModel()\n",
        "model.fit(train_ds)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9MNCDoAl-4tm",
        "outputId": "14158c76-75d3-4ee2-b7b6-b7e06237a002"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Use /tmp/tmpjxydb5n5 as temporary training directory\n",
            "Reading training dataset...\n",
            "Training dataset read in 0:00:07.908090. Found 2661 examples.\n",
            "Training model...\n",
            "Model trained in 0:00:03.984546\n",
            "Compiling model...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:AutoGraph could not transform <function simple_ml_inference_op_with_handle at 0x7f1fe2a68790> and will run it as-is.\n",
            "Please report this to the TensorFlow team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output.\n",
            "Cause: could not get source code\n",
            "To silence this warning, decorate the function with @tf.autograph.experimental.do_not_convert\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "WARNING: AutoGraph could not transform <function simple_ml_inference_op_with_handle at 0x7f1fe2a68790> and will run it as-is.\n",
            "Please report this to the TensorFlow team. When filing the bug, set the verbosity to 10 (on Linux, `export AUTOGRAPH_VERBOSITY=10`) and attach the full output.\n",
            "Cause: could not get source code\n",
            "To silence this warning, decorate the function with @tf.autograph.experimental.do_not_convert\n",
            "Model compiled.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<keras.callbacks.History at 0x7f1fe199c850>"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "V1VF4-p1--pT",
        "outputId": "2c443e50-d7b0-43e8-d554-c46bb4a6b22a"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"random_forest_model\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            "=================================================================\n",
            "Total params: 1\n",
            "Trainable params: 0\n",
            "Non-trainable params: 1\n",
            "_________________________________________________________________\n",
            "Type: \"RANDOM_FOREST\"\n",
            "Task: CLASSIFICATION\n",
            "Label: \"__LABEL\"\n",
            "\n",
            "Input Features (19):\n",
            "\tAccount_length\n",
            "\tArea_code\n",
            "\tCustomer_service_calls\n",
            "\tInternational_plan\n",
            "\tNumber_vmail_messages\n",
            "\tState\n",
            "\tTotal_day_calls\n",
            "\tTotal_day_charge\n",
            "\tTotal_day_minutes\n",
            "\tTotal_eve_calls\n",
            "\tTotal_eve_charge\n",
            "\tTotal_eve_minutes\n",
            "\tTotal_intl_calls\n",
            "\tTotal_intl_charge\n",
            "\tTotal_intl_minutes\n",
            "\tTotal_night_calls\n",
            "\tTotal_night_charge\n",
            "\tTotal_night_minutes\n",
            "\tVoice_mail_plan\n",
            "\n",
            "No weights\n",
            "\n",
            "Variable Importance: MEAN_MIN_DEPTH:\n",
            "    1.                \"__LABEL\"  8.482775 ################\n",
            "    2.              \"Area_code\"  8.390988 ###############\n",
            "    3.        \"Voice_mail_plan\"  7.967308 ##############\n",
            "    4.        \"Total_eve_calls\"  7.879587 ##############\n",
            "    5.      \"Total_night_calls\"  7.824199 ##############\n",
            "    6.         \"Account_length\"  7.801322 ##############\n",
            "    7.  \"Number_vmail_messages\"  7.683256 #############\n",
            "    8.        \"Total_day_calls\"  7.655817 #############\n",
            "    9.     \"Total_night_charge\"  7.485879 #############\n",
            "   10.    \"Total_night_minutes\"  7.417136 ############\n",
            "   11.     \"Total_intl_minutes\"  7.104105 ############\n",
            "   12.       \"Total_intl_calls\"  7.066816 ###########\n",
            "   13.      \"Total_intl_charge\"  6.937118 ###########\n",
            "   14.      \"Total_eve_minutes\"  6.639224 ##########\n",
            "   15.       \"Total_eve_charge\"  6.610531 ##########\n",
            "   16.     \"International_plan\"  4.240552 ###\n",
            "   17.      \"Total_day_minutes\"  3.954624 ##\n",
            "   18.       \"Total_day_charge\"  3.812730 ##\n",
            "   19.                  \"State\"  3.572875 #\n",
            "   20. \"Customer_service_calls\"  2.917440 \n",
            "\n",
            "Variable Importance: NUM_AS_ROOT:\n",
            "    1.       \"Total_day_charge\" 82.000000 ################\n",
            "    2. \"Customer_service_calls\" 73.000000 ##############\n",
            "    3.      \"Total_day_minutes\" 66.000000 ############\n",
            "    4.     \"International_plan\" 37.000000 #######\n",
            "    5.                  \"State\" 21.000000 ###\n",
            "    6.     \"Total_intl_minutes\"  6.000000 \n",
            "    7.      \"Total_intl_charge\"  4.000000 \n",
            "    8.       \"Total_intl_calls\"  3.000000 \n",
            "    9.  \"Number_vmail_messages\"  2.000000 \n",
            "   10.      \"Total_eve_minutes\"  2.000000 \n",
            "   11.        \"Voice_mail_plan\"  2.000000 \n",
            "   12.     \"Total_night_charge\"  1.000000 \n",
            "   13.    \"Total_night_minutes\"  1.000000 \n",
            "\n",
            "Variable Importance: NUM_NODES:\n",
            "    1.                  \"State\" 4892.000000 ################\n",
            "    2.       \"Total_day_charge\" 1937.000000 #####\n",
            "    3.      \"Total_day_minutes\" 1906.000000 #####\n",
            "    4.      \"Total_eve_minutes\" 1706.000000 ####\n",
            "    5.       \"Total_eve_charge\" 1670.000000 ####\n",
            "    6.    \"Total_night_minutes\" 1308.000000 ###\n",
            "    7.     \"Total_night_charge\" 1261.000000 ###\n",
            "    8.      \"Total_intl_charge\" 1190.000000 ###\n",
            "    9.        \"Total_day_calls\" 1189.000000 ###\n",
            "   10.     \"Total_intl_minutes\" 1187.000000 ###\n",
            "   11.      \"Total_night_calls\" 1146.000000 ###\n",
            "   12.         \"Account_length\" 1144.000000 ###\n",
            "   13.        \"Total_eve_calls\" 1092.000000 ##\n",
            "   14.       \"Total_intl_calls\" 1025.000000 ##\n",
            "   15. \"Customer_service_calls\" 963.000000 ##\n",
            "   16.     \"International_plan\" 730.000000 #\n",
            "   17.  \"Number_vmail_messages\" 615.000000 #\n",
            "   18.        \"Voice_mail_plan\" 327.000000 \n",
            "   19.              \"Area_code\" 258.000000 \n",
            "\n",
            "Variable Importance: SUM_SCORE:\n",
            "    1.                  \"State\" 64404.248808 ################\n",
            "    2. \"Customer_service_calls\" 34991.732195 ########\n",
            "    3.      \"Total_day_minutes\" 32821.859583 ########\n",
            "    4.       \"Total_day_charge\" 32772.770218 ########\n",
            "    5.     \"International_plan\" 27227.705780 ######\n",
            "    6.      \"Total_eve_minutes\" 13879.985039 ###\n",
            "    7.       \"Total_eve_charge\" 13682.925286 ###\n",
            "    8.       \"Total_intl_calls\" 13458.406370 ###\n",
            "    9.     \"Total_intl_minutes\" 9857.993695 ##\n",
            "   10.      \"Total_intl_charge\" 9535.253200 ##\n",
            "   11.    \"Total_night_minutes\" 6635.250560 #\n",
            "   12.     \"Total_night_charge\" 6406.753217 #\n",
            "   13.  \"Number_vmail_messages\" 5629.740556 #\n",
            "   14.        \"Total_day_calls\" 5388.005848 #\n",
            "   15.      \"Total_night_calls\" 4927.023330 #\n",
            "   16.         \"Account_length\" 4921.258808 #\n",
            "   17.        \"Total_eve_calls\" 4548.988171 \n",
            "   18.        \"Voice_mail_plan\" 4390.551917 \n",
            "   19.              \"Area_code\" 935.771010 \n",
            "\n",
            "\n",
            "\n",
            "Winner take all: true\n",
            "Out-of-bag evaluation: accuracy:0.936114 logloss:0.389859\n",
            "Number of trees: 300\n",
            "Total number of nodes: 51392\n",
            "\n",
            "Number of nodes by tree:\n",
            "Count: 300 Average: 171.307 StdDev: 22.1681\n",
            "Min: 123 Max: 235 Ignored: 0\n",
            "----------------------------------------------\n",
            "[ 123, 128)  2   0.67%   0.67% #\n",
            "[ 128, 134)  6   2.00%   2.67% ##\n",
            "[ 134, 139)  7   2.33%   5.00% ##\n",
            "[ 139, 145) 18   6.00%  11.00% ######\n",
            "[ 145, 151) 21   7.00%  18.00% #######\n",
            "[ 151, 156) 28   9.33%  27.33% #########\n",
            "[ 156, 162) 30  10.00%  37.33% ##########\n",
            "[ 162, 168) 29   9.67%  47.00% ##########\n",
            "[ 168, 173) 25   8.33%  55.33% ########\n",
            "[ 173, 179) 26   8.67%  64.00% #########\n",
            "[ 179, 185) 23   7.67%  71.67% ########\n",
            "[ 185, 190) 19   6.33%  78.00% ######\n",
            "[ 190, 196) 20   6.67%  84.67% #######\n",
            "[ 196, 202) 20   6.67%  91.33% #######\n",
            "[ 202, 207)  6   2.00%  93.33% ##\n",
            "[ 207, 213)  9   3.00%  96.33% ###\n",
            "[ 213, 219)  2   0.67%  97.00% #\n",
            "[ 219, 224)  5   1.67%  98.67% ##\n",
            "[ 224, 230)  3   1.00%  99.67% #\n",
            "[ 230, 235]  1   0.33% 100.00%\n",
            "\n",
            "Depth by leafs:\n",
            "Count: 25846 Average: 8.49327 StdDev: 2.82298\n",
            "Min: 2 Max: 15 Ignored: 0\n",
            "----------------------------------------------\n",
            "[  2,  3)   61   0.24%   0.24%\n",
            "[  3,  4)  363   1.40%   1.64% #\n",
            "[  4,  5) 1111   4.30%   5.94% ###\n",
            "[  5,  6) 2229   8.62%  14.56% ######\n",
            "[  6,  7) 3083  11.93%  26.49% #########\n",
            "[  7,  8) 3626  14.03%  40.52% ##########\n",
            "[  8,  9) 3528  13.65%  54.17% ##########\n",
            "[  9, 10) 3002  11.61%  65.79% ########\n",
            "[ 10, 11) 2581   9.99%  75.77% #######\n",
            "[ 11, 12) 2101   8.13%  83.90% ######\n",
            "[ 12, 13) 1590   6.15%  90.05% ####\n",
            "[ 13, 14) 1082   4.19%  94.24% ###\n",
            "[ 14, 15)  807   3.12%  97.36% ##\n",
            "[ 15, 15]  682   2.64% 100.00% ##\n",
            "\n",
            "Number of training obs by leaf:\n",
            "Count: 25846 Average: 30.8868 StdDev: 76.9659\n",
            "Min: 5 Max: 1113 Ignored: 0\n",
            "----------------------------------------------\n",
            "[    5,   60) 23179  89.68%  89.68% ##########\n",
            "[   60,  115)  1311   5.07%  94.75% #\n",
            "[  115,  171)   481   1.86%  96.61%\n",
            "[  171,  226)   239   0.92%  97.54%\n",
            "[  226,  282)   174   0.67%  98.21%\n",
            "[  282,  337)   103   0.40%  98.61%\n",
            "[  337,  393)    71   0.27%  98.89%\n",
            "[  393,  448)    54   0.21%  99.09%\n",
            "[  448,  504)    41   0.16%  99.25%\n",
            "[  504,  559)    40   0.15%  99.41%\n",
            "[  559,  614)    43   0.17%  99.57%\n",
            "[  614,  670)    23   0.09%  99.66%\n",
            "[  670,  725)    24   0.09%  99.76%\n",
            "[  725,  781)    22   0.09%  99.84%\n",
            "[  781,  836)    11   0.04%  99.88%\n",
            "[  836,  892)     9   0.03%  99.92%\n",
            "[  892,  947)     6   0.02%  99.94%\n",
            "[  947, 1003)     7   0.03%  99.97%\n",
            "[ 1003, 1058)     4   0.02%  99.98%\n",
            "[ 1058, 1113]     4   0.02% 100.00%\n",
            "\n",
            "Attribute in nodes:\n",
            "\t4892 : State [CATEGORICAL]\n",
            "\t1937 : Total_day_charge [NUMERICAL]\n",
            "\t1906 : Total_day_minutes [NUMERICAL]\n",
            "\t1706 : Total_eve_minutes [NUMERICAL]\n",
            "\t1670 : Total_eve_charge [NUMERICAL]\n",
            "\t1308 : Total_night_minutes [NUMERICAL]\n",
            "\t1261 : Total_night_charge [NUMERICAL]\n",
            "\t1190 : Total_intl_charge [NUMERICAL]\n",
            "\t1189 : Total_day_calls [NUMERICAL]\n",
            "\t1187 : Total_intl_minutes [NUMERICAL]\n",
            "\t1146 : Total_night_calls [NUMERICAL]\n",
            "\t1144 : Account_length [NUMERICAL]\n",
            "\t1092 : Total_eve_calls [NUMERICAL]\n",
            "\t1025 : Total_intl_calls [NUMERICAL]\n",
            "\t963 : Customer_service_calls [NUMERICAL]\n",
            "\t730 : International_plan [CATEGORICAL]\n",
            "\t615 : Number_vmail_messages [NUMERICAL]\n",
            "\t327 : Voice_mail_plan [CATEGORICAL]\n",
            "\t258 : Area_code [NUMERICAL]\n",
            "\n",
            "Attribute in nodes with depth <= 0:\n",
            "\t82 : Total_day_charge [NUMERICAL]\n",
            "\t73 : Customer_service_calls [NUMERICAL]\n",
            "\t66 : Total_day_minutes [NUMERICAL]\n",
            "\t37 : International_plan [CATEGORICAL]\n",
            "\t21 : State [CATEGORICAL]\n",
            "\t6 : Total_intl_minutes [NUMERICAL]\n",
            "\t4 : Total_intl_charge [NUMERICAL]\n",
            "\t3 : Total_intl_calls [NUMERICAL]\n",
            "\t2 : Voice_mail_plan [CATEGORICAL]\n",
            "\t2 : Total_eve_minutes [NUMERICAL]\n",
            "\t2 : Number_vmail_messages [NUMERICAL]\n",
            "\t1 : Total_night_minutes [NUMERICAL]\n",
            "\t1 : Total_night_charge [NUMERICAL]\n",
            "\n",
            "Attribute in nodes with depth <= 1:\n",
            "\t145 : Customer_service_calls [NUMERICAL]\n",
            "\t143 : Total_day_charge [NUMERICAL]\n",
            "\t133 : Total_day_minutes [NUMERICAL]\n",
            "\t130 : State [CATEGORICAL]\n",
            "\t101 : International_plan [CATEGORICAL]\n",
            "\t39 : Total_eve_minutes [NUMERICAL]\n",
            "\t33 : Voice_mail_plan [CATEGORICAL]\n",
            "\t33 : Total_intl_minutes [NUMERICAL]\n",
            "\t30 : Total_eve_charge [NUMERICAL]\n",
            "\t30 : Number_vmail_messages [NUMERICAL]\n",
            "\t27 : Total_intl_charge [NUMERICAL]\n",
            "\t27 : Total_intl_calls [NUMERICAL]\n",
            "\t11 : Total_night_charge [NUMERICAL]\n",
            "\t8 : Total_night_minutes [NUMERICAL]\n",
            "\t4 : Total_day_calls [NUMERICAL]\n",
            "\t2 : Total_night_calls [NUMERICAL]\n",
            "\t2 : Total_eve_calls [NUMERICAL]\n",
            "\t1 : Area_code [NUMERICAL]\n",
            "\t1 : Account_length [NUMERICAL]\n",
            "\n",
            "Attribute in nodes with depth <= 2:\n",
            "\t363 : State [CATEGORICAL]\n",
            "\t261 : Total_day_minutes [NUMERICAL]\n",
            "\t247 : Total_day_charge [NUMERICAL]\n",
            "\t233 : Customer_service_calls [NUMERICAL]\n",
            "\t172 : International_plan [CATEGORICAL]\n",
            "\t126 : Total_eve_minutes [NUMERICAL]\n",
            "\t111 : Total_eve_charge [NUMERICAL]\n",
            "\t83 : Total_intl_charge [NUMERICAL]\n",
            "\t73 : Total_intl_minutes [NUMERICAL]\n",
            "\t71 : Number_vmail_messages [NUMERICAL]\n",
            "\t68 : Total_intl_calls [NUMERICAL]\n",
            "\t66 : Voice_mail_plan [CATEGORICAL]\n",
            "\t48 : Total_night_charge [NUMERICAL]\n",
            "\t36 : Total_night_minutes [NUMERICAL]\n",
            "\t23 : Total_night_calls [NUMERICAL]\n",
            "\t21 : Total_day_calls [NUMERICAL]\n",
            "\t20 : Account_length [NUMERICAL]\n",
            "\t13 : Total_eve_calls [NUMERICAL]\n",
            "\t4 : Area_code [NUMERICAL]\n",
            "\n",
            "Attribute in nodes with depth <= 3:\n",
            "\t769 : State [CATEGORICAL]\n",
            "\t441 : Total_day_minutes [NUMERICAL]\n",
            "\t439 : Total_day_charge [NUMERICAL]\n",
            "\t322 : Customer_service_calls [NUMERICAL]\n",
            "\t291 : International_plan [CATEGORICAL]\n",
            "\t266 : Total_eve_minutes [NUMERICAL]\n",
            "\t229 : Total_eve_charge [NUMERICAL]\n",
            "\t153 : Total_intl_calls [NUMERICAL]\n",
            "\t149 : Total_intl_charge [NUMERICAL]\n",
            "\t147 : Total_intl_minutes [NUMERICAL]\n",
            "\t139 : Number_vmail_messages [NUMERICAL]\n",
            "\t125 : Voice_mail_plan [CATEGORICAL]\n",
            "\t119 : Total_night_charge [NUMERICAL]\n",
            "\t109 : Total_night_minutes [NUMERICAL]\n",
            "\t67 : Account_length [NUMERICAL]\n",
            "\t64 : Total_day_calls [NUMERICAL]\n",
            "\t60 : Total_night_calls [NUMERICAL]\n",
            "\t54 : Total_eve_calls [NUMERICAL]\n",
            "\t11 : Area_code [NUMERICAL]\n",
            "\n",
            "Attribute in nodes with depth <= 5:\n",
            "\t2046 : State [CATEGORICAL]\n",
            "\t926 : Total_day_minutes [NUMERICAL]\n",
            "\t913 : Total_day_charge [NUMERICAL]\n",
            "\t686 : Total_eve_minutes [NUMERICAL]\n",
            "\t658 : Total_eve_charge [NUMERICAL]\n",
            "\t512 : International_plan [CATEGORICAL]\n",
            "\t499 : Customer_service_calls [NUMERICAL]\n",
            "\t433 : Total_intl_charge [NUMERICAL]\n",
            "\t419 : Total_intl_minutes [NUMERICAL]\n",
            "\t413 : Total_night_minutes [NUMERICAL]\n",
            "\t389 : Total_intl_calls [NUMERICAL]\n",
            "\t381 : Total_night_charge [NUMERICAL]\n",
            "\t308 : Number_vmail_messages [NUMERICAL]\n",
            "\t267 : Total_day_calls [NUMERICAL]\n",
            "\t260 : Account_length [NUMERICAL]\n",
            "\t251 : Total_night_calls [NUMERICAL]\n",
            "\t236 : Total_eve_calls [NUMERICAL]\n",
            "\t230 : Voice_mail_plan [CATEGORICAL]\n",
            "\t55 : Area_code [NUMERICAL]\n",
            "\n",
            "Condition type in nodes:\n",
            "\t19597 : HigherCondition\n",
            "\t5838 : ContainsBitmapCondition\n",
            "\t111 : ContainsCondition\n",
            "Condition type in nodes with depth <= 0:\n",
            "\t240 : HigherCondition\n",
            "\t60 : ContainsBitmapCondition\n",
            "Condition type in nodes with depth <= 1:\n",
            "\t636 : HigherCondition\n",
            "\t264 : ContainsBitmapCondition\n",
            "Condition type in nodes with depth <= 2:\n",
            "\t1438 : HigherCondition\n",
            "\t601 : ContainsBitmapCondition\n",
            "Condition type in nodes with depth <= 3:\n",
            "\t2769 : HigherCondition\n",
            "\t1183 : ContainsBitmapCondition\n",
            "\t2 : ContainsCondition\n",
            "Condition type in nodes with depth <= 5:\n",
            "\t7094 : HigherCondition\n",
            "\t2773 : ContainsBitmapCondition\n",
            "\t15 : ContainsCondition\n",
            "Node format: NOT_SET\n",
            "\n",
            "Training OOB:\n",
            "\ttrees: 1, Out-of-bag evaluation: accuracy:0.85904 logloss:5.08072\n",
            "\ttrees: 11, Out-of-bag evaluation: accuracy:0.907994 logloss:1.48748\n",
            "\ttrees: 21, Out-of-bag evaluation: accuracy:0.92935 logloss:0.92205\n",
            "\ttrees: 31, Out-of-bag evaluation: accuracy:0.933859 logloss:0.792796\n",
            "\ttrees: 41, Out-of-bag evaluation: accuracy:0.933859 logloss:0.705986\n",
            "\ttrees: 51, Out-of-bag evaluation: accuracy:0.935363 logloss:0.6648\n",
            "\ttrees: 61, Out-of-bag evaluation: accuracy:0.935738 logloss:0.652783\n",
            "\ttrees: 71, Out-of-bag evaluation: accuracy:0.935738 logloss:0.60299\n",
            "\ttrees: 81, Out-of-bag evaluation: accuracy:0.934611 logloss:0.566573\n",
            "\ttrees: 91, Out-of-bag evaluation: accuracy:0.936114 logloss:0.565265\n",
            "\ttrees: 101, Out-of-bag evaluation: accuracy:0.938369 logloss:0.564553\n",
            "\ttrees: 111, Out-of-bag evaluation: accuracy:0.937242 logloss:0.541299\n",
            "\ttrees: 121, Out-of-bag evaluation: accuracy:0.937993 logloss:0.492833\n",
            "\ttrees: 131, Out-of-bag evaluation: accuracy:0.936866 logloss:0.493887\n",
            "\ttrees: 141, Out-of-bag evaluation: accuracy:0.937993 logloss:0.493759\n",
            "\ttrees: 151, Out-of-bag evaluation: accuracy:0.93649 logloss:0.483083\n",
            "\ttrees: 161, Out-of-bag evaluation: accuracy:0.936114 logloss:0.471751\n",
            "\ttrees: 171, Out-of-bag evaluation: accuracy:0.936866 logloss:0.447922\n",
            "\ttrees: 181, Out-of-bag evaluation: accuracy:0.936866 logloss:0.424687\n",
            "\ttrees: 191, Out-of-bag evaluation: accuracy:0.935738 logloss:0.425978\n",
            "\ttrees: 201, Out-of-bag evaluation: accuracy:0.936114 logloss:0.414005\n",
            "\ttrees: 211, Out-of-bag evaluation: accuracy:0.93649 logloss:0.413723\n",
            "\ttrees: 221, Out-of-bag evaluation: accuracy:0.935363 logloss:0.401501\n",
            "\ttrees: 231, Out-of-bag evaluation: accuracy:0.936114 logloss:0.401224\n",
            "\ttrees: 241, Out-of-bag evaluation: accuracy:0.936114 logloss:0.401164\n",
            "\ttrees: 251, Out-of-bag evaluation: accuracy:0.93649 logloss:0.40094\n",
            "\ttrees: 261, Out-of-bag evaluation: accuracy:0.936114 logloss:0.401354\n",
            "\ttrees: 271, Out-of-bag evaluation: accuracy:0.93649 logloss:0.400919\n",
            "\ttrees: 281, Out-of-bag evaluation: accuracy:0.936866 logloss:0.401475\n",
            "\ttrees: 291, Out-of-bag evaluation: accuracy:0.93649 logloss:0.389796\n",
            "\ttrees: 300, Out-of-bag evaluation: accuracy:0.936114 logloss:0.389859\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "tfdf.model_plotter.plot_model_in_colab(model)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 404
        },
        "id": "FffFRWub7gUu",
        "outputId": "d6bbf3ed-157c-4093-9720-9c25e8c5e299"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "<script src=\"https://d3js.org/d3.v6.min.js\"></script>\n",
              "<div id=\"tree_plot_88c451663f654359ab84d61080ee1be0\"></div>\n",
              "<script>\n",
              "/*\n",
              " * Copyright 2021 Google LLC.\n",
              " * Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              " * you may not use this file except in compliance with the License.\n",
              " * You may obtain a copy of the License at\n",
              " *\n",
              " *     https://www.apache.org/licenses/LICENSE-2.0\n",
              " *\n",
              " * Unless required by applicable law or agreed to in writing, software\n",
              " * distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              " * See the License for the specific language governing permissions and\n",
              " * limitations under the License.\n",
              " */\n",
              "\n",
              "/**\n",
              " *  Plotting of decision trees generated by TF-DF.\n",
              " *\n",
              " *  A tree is a recursive structure of node objects.\n",
              " *  A node contains one or more of the following components:\n",
              " *\n",
              " *    - A value: Representing the output of the node. If the node is not a leaf,\n",
              " *      the value is only present for analysis i.e. it is not used for\n",
              " *      predictions.\n",
              " *\n",
              " *    - A condition : For non-leaf nodes, the condition (also known as split)\n",
              " *      defines a binary test to branch to the positive or negative child.\n",
              " *\n",
              " *    - An explanation: Generally a plot showing the relation between the label\n",
              " *      and the condition to give insights about the effect of the condition.\n",
              " *\n",
              " *    - Two children : For non-leaf nodes, the children nodes. The first\n",
              " *      children (i.e. \"node.children[0]\") is the negative children (drawn in\n",
              " *      red). The second children is the positive one (drawn in green).\n",
              " *\n",
              " */\n",
              "\n",
              "/**\n",
              " * Plots a single decision tree into a DOM element.\n",
              " * @param {!options} options Dictionary of configurations.\n",
              " * @param {!tree} raw_tree Recursive tree structure.\n",
              " * @param {string} canvas_id Id of the output dom element.\n",
              " */\n",
              "function display_tree(options, raw_tree, canvas_id) {\n",
              "  console.log(options);\n",
              "\n",
              "  // Determine the node placement.\n",
              "  const tree_struct = d3.tree().nodeSize(\n",
              "      [options.node_y_offset, options.node_x_offset])(d3.hierarchy(raw_tree));\n",
              "\n",
              "  // Boundaries of the node placement.\n",
              "  let x_min = Infinity;\n",
              "  let x_max = -x_min;\n",
              "  let y_min = Infinity;\n",
              "  let y_max = -x_min;\n",
              "\n",
              "  tree_struct.each(d => {\n",
              "    if (d.x > x_max) x_max = d.x;\n",
              "    if (d.x < x_min) x_min = d.x;\n",
              "    if (d.y > y_max) y_max = d.y;\n",
              "    if (d.y < y_min) y_min = d.y;\n",
              "  });\n",
              "\n",
              "  // Size of the plot.\n",
              "  const width = y_max - y_min + options.node_x_size + options.margin * 2;\n",
              "  const height = x_max - x_min + options.node_y_size + options.margin * 2 +\n",
              "      options.node_y_offset - options.node_y_size;\n",
              "\n",
              "  const plot = d3.select(canvas_id);\n",
              "\n",
              "  // Tool tip\n",
              "  options.tooltip = plot.append('div')\n",
              "                        .attr('width', 100)\n",
              "                        .attr('height', 100)\n",
              "                        .style('padding', '4px')\n",
              "                        .style('background', '#fff')\n",
              "                        .style('box-shadow', '4px 4px 0px rgba(0,0,0,0.1)')\n",
              "                        .style('border', '1px solid black')\n",
              "                        .style('font-family', 'sans-serif')\n",
              "                        .style('font-size', options.font_size)\n",
              "                        .style('position', 'absolute')\n",
              "                        .style('z-index', '10')\n",
              "                        .attr('pointer-events', 'none')\n",
              "                        .style('display', 'none');\n",
              "\n",
              "  // Create canvas\n",
              "  const svg = plot.append('svg').attr('width', width).attr('height', height);\n",
              "  const graph =\n",
              "      svg.style('overflow', 'visible')\n",
              "          .append('g')\n",
              "          .attr('font-family', 'sans-serif')\n",
              "          .attr('font-size', options.font_size)\n",
              "          .attr(\n",
              "              'transform',\n",
              "              () => `translate(${options.margin},${\n",
              "                  - x_min + options.node_y_offset / 2 + options.margin})`);\n",
              "\n",
              "  // Plot bounding box.\n",
              "  if (options.show_plot_bounding_box) {\n",
              "    svg.append('rect')\n",
              "        .attr('width', width)\n",
              "        .attr('height', height)\n",
              "        .attr('fill', 'none')\n",
              "        .attr('stroke-width', 1.0)\n",
              "        .attr('stroke', 'black');\n",
              "  }\n",
              "\n",
              "  // Draw the edges.\n",
              "  display_edges(options, graph, tree_struct);\n",
              "\n",
              "  // Draw the nodes.\n",
              "  display_nodes(options, graph, tree_struct);\n",
              "}\n",
              "\n",
              "/**\n",
              " * Draw the nodes of the tree.\n",
              " * @param {!options} options Dictionary of configurations.\n",
              " * @param {!graph} graph D3 search handle containing the graph.\n",
              " * @param {!tree_struct} tree_struct Structure of the tree (node placement,\n",
              " *     data, etc.).\n",
              " */\n",
              "function display_nodes(options, graph, tree_struct) {\n",
              "  const nodes = graph.append('g')\n",
              "                    .selectAll('g')\n",
              "                    .data(tree_struct.descendants())\n",
              "                    .join('g')\n",
              "                    .attr('transform', d => `translate(${d.y},${d.x})`);\n",
              "\n",
              "  nodes.append('rect')\n",
              "      .attr('x', 0.5)\n",
              "      .attr('y', 0.5)\n",
              "      .attr('width', options.node_x_size)\n",
              "      .attr('height', options.node_y_size)\n",
              "      .attr('stroke', 'lightgrey')\n",
              "      .attr('stroke-width', 1)\n",
              "      .attr('fill', 'white')\n",
              "      .attr('y', -options.node_y_size / 2);\n",
              "\n",
              "  // Brackets on the right of condition nodes without children.\n",
              "  non_leaf_node_without_children =\n",
              "      nodes.filter(node => node.data.condition != null && node.children == null)\n",
              "          .append('g')\n",
              "          .attr('transform', `translate(${options.node_x_size},0)`);\n",
              "\n",
              "  non_leaf_node_without_children.append('path')\n",
              "      .attr('d', 'M0,0 C 10,0 0,10 10,10')\n",
              "      .attr('fill', 'none')\n",
              "      .attr('stroke-width', 1.0)\n",
              "      .attr('stroke', '#F00');\n",
              "\n",
              "  non_leaf_node_without_children.append('path')\n",
              "      .attr('d', 'M0,0 C 10,0 0,-10 10,-10')\n",
              "      .attr('fill', 'none')\n",
              "      .attr('stroke-width', 1.0)\n",
              "      .attr('stroke', '#0F0');\n",
              "\n",
              "  const node_content = nodes.append('g').attr(\n",
              "      'transform',\n",
              "      `translate(0,${options.node_padding - options.node_y_size / 2})`);\n",
              "\n",
              "  node_content.append(node => create_node_element(options, node));\n",
              "}\n",
              "\n",
              "/**\n",
              " * Creates the D3 content for a single node.\n",
              " * @param {!options} options Dictionary of configurations.\n",
              " * @param {!node} node Node to draw.\n",
              " * @return {!d3} D3 content.\n",
              " */\n",
              "function create_node_element(options, node) {\n",
              "  // Output accumulator.\n",
              "  let output = {\n",
              "    // Content to draw.\n",
              "    content: d3.create('svg:g'),\n",
              "    // Vertical offset to the next element to draw.\n",
              "    vertical_offset: 0\n",
              "  };\n",
              "\n",
              "  // Conditions.\n",
              "  if (node.data.condition != null) {\n",
              "    display_condition(options, node.data.condition, output);\n",
              "  }\n",
              "\n",
              "  // Values.\n",
              "  if (node.data.value != null) {\n",
              "    display_value(options, node.data.value, output);\n",
              "  }\n",
              "\n",
              "  // Explanations.\n",
              "  if (node.data.explanation != null) {\n",
              "    display_explanation(options, node.data.explanation, output);\n",
              "  }\n",
              "\n",
              "  return output.content.node();\n",
              "}\n",
              "\n",
              "\n",
              "/**\n",
              " * Adds a single line of text inside of a node.\n",
              " * @param {!options} options Dictionary of configurations.\n",
              " * @param {string} text Text to display.\n",
              " * @param {!output} output Output display accumulator.\n",
              " */\n",
              "function display_node_text(options, text, output) {\n",
              "  output.content.append('text')\n",
              "      .attr('x', options.node_padding)\n",
              "      .attr('y', output.vertical_offset)\n",
              "      .attr('alignment-baseline', 'hanging')\n",
              "      .text(text);\n",
              "  output.vertical_offset += 10;\n",
              "}\n",
              "\n",
              "/**\n",
              " * Adds a single line of text inside of a node with a tooltip.\n",
              " * @param {!options} options Dictionary of configurations.\n",
              " * @param {string} text Text to display.\n",
              " * @param {string} tooltip Text in the Tooltip.\n",
              " * @param {!output} output Output display accumulator.\n",
              " */\n",
              "function display_node_text_with_tooltip(options, text, tooltip, output) {\n",
              "  const item = output.content.append('text')\n",
              "                   .attr('x', options.node_padding)\n",
              "                   .attr('alignment-baseline', 'hanging')\n",
              "                   .text(text);\n",
              "\n",
              "  add_tooltip(options, item, () => tooltip);\n",
              "  output.vertical_offset += 10;\n",
              "}\n",
              "\n",
              "/**\n",
              " * Adds a tooltip to a dom element.\n",
              " * @param {!options} options Dictionary of configurations.\n",
              " * @param {!dom} target Dom element to equip with a tooltip.\n",
              " * @param {!func} get_content Generates the html content of the tooltip.\n",
              " */\n",
              "function add_tooltip(options, target, get_content) {\n",
              "  function show(d) {\n",
              "    options.tooltip.style('display', 'block');\n",
              "    options.tooltip.html(get_content());\n",
              "  }\n",
              "\n",
              "  function hide(d) {\n",
              "    options.tooltip.style('display', 'none');\n",
              "  }\n",
              "\n",
              "  function move(d) {\n",
              "    options.tooltip.style('display', 'block');\n",
              "    options.tooltip.style('left', (d.pageX + 5) + 'px');\n",
              "    options.tooltip.style('top', d.pageY + 'px');\n",
              "  }\n",
              "\n",
              "  target.on('mouseover', show);\n",
              "  target.on('mouseout', hide);\n",
              "  target.on('mousemove', move);\n",
              "}\n",
              "\n",
              "/**\n",
              " * Adds a condition inside of a node.\n",
              " * @param {!options} options Dictionary of configurations.\n",
              " * @param {!condition} condition Condition to display.\n",
              " * @param {!output} output Output display accumulator.\n",
              " */\n",
              "function display_condition(options, condition, output) {\n",
              "  threshold_format = d3.format('r');\n",
              "\n",
              "  if (condition.type === 'IS_MISSING') {\n",
              "    display_node_text(options, `${condition.attribute} is missing`, output);\n",
              "    return;\n",
              "  }\n",
              "\n",
              "  if (condition.type === 'IS_TRUE') {\n",
              "    display_node_text(options, `${condition.attribute} is true`, output);\n",
              "    return;\n",
              "  }\n",
              "\n",
              "  if (condition.type === 'NUMERICAL_IS_HIGHER_THAN') {\n",
              "    format = d3.format('r');\n",
              "    display_node_text(\n",
              "        options,\n",
              "        `${condition.attribute} >= ${threshold_format(condition.threshold)}`,\n",
              "        output);\n",
              "    return;\n",
              "  }\n",
              "\n",
              "  if (condition.type === 'CATEGORICAL_IS_IN') {\n",
              "    display_node_text_with_tooltip(\n",
              "        options, `${condition.attribute} in [...]`,\n",
              "        `${condition.attribute} in [${condition.mask}]`, output);\n",
              "    return;\n",
              "  }\n",
              "\n",
              "  if (condition.type === 'CATEGORICAL_SET_CONTAINS') {\n",
              "    display_node_text_with_tooltip(\n",
              "        options, `${condition.attribute} intersect [...]`,\n",
              "        `${condition.attribute} intersect [${condition.mask}]`, output);\n",
              "    return;\n",
              "  }\n",
              "\n",
              "  if (condition.type === 'NUMERICAL_SPARSE_OBLIQUE') {\n",
              "    display_node_text_with_tooltip(\n",
              "        options, `Sparse oblique split...`,\n",
              "        `[${condition.attributes}]*[${condition.weights}]>=${\n",
              "            threshold_format(condition.threshold)}`,\n",
              "        output);\n",
              "    return;\n",
              "  }\n",
              "\n",
              "  display_node_text(\n",
              "      options, `Non supported condition ${condition.type}`, output);\n",
              "}\n",
              "\n",
              "/**\n",
              " * Adds a value inside of a node.\n",
              " * @param {!options} options Dictionary of configurations.\n",
              " * @param {!value} value Value to display.\n",
              " * @param {!output} output Output display accumulator.\n",
              " */\n",
              "function display_value(options, value, output) {\n",
              "  if (value.type === 'PROBABILITY') {\n",
              "    const left_margin = 0;\n",
              "    const right_margin = 50;\n",
              "    const plot_width = options.node_x_size - options.node_padding * 2 -\n",
              "        left_margin - right_margin;\n",
              "\n",
              "    let cusum = Array.from(d3.cumsum(value.distribution));\n",
              "    cusum.unshift(0);\n",
              "    const distribution_plot = output.content.append('g').attr(\n",
              "        'transform', `translate(0,${output.vertical_offset + 0.5})`);\n",
              "\n",
              "    distribution_plot.selectAll('rect')\n",
              "        .data(value.distribution)\n",
              "        .join('rect')\n",
              "        .attr('height', 10)\n",
              "        .attr(\n",
              "            'x',\n",
              "            (d, i) =>\n",
              "                (cusum[i] * plot_width + left_margin + options.node_padding))\n",
              "        .attr('width', (d, i) => d * plot_width)\n",
              "        .style('fill', (d, i) => d3.schemeSet1[i]);\n",
              "\n",
              "    const num_examples =\n",
              "        output.content.append('g')\n",
              "            .attr('transform', `translate(0,${output.vertical_offset})`)\n",
              "            .append('text')\n",
              "            .attr('x', options.node_x_size - options.node_padding)\n",
              "            .attr('alignment-baseline', 'hanging')\n",
              "            .attr('text-anchor', 'end')\n",
              "            .text(`(${value.num_examples})`);\n",
              "\n",
              "    const distribution_details = d3.create('ul');\n",
              "    distribution_details.selectAll('li')\n",
              "        .data(value.distribution)\n",
              "        .join('li')\n",
              "        .append('span')\n",
              "        .text(\n",
              "            (d, i) =>\n",
              "                'class ' + i + ': ' + d3.format('.3%')(value.distribution[i]));\n",
              "\n",
              "    add_tooltip(options, distribution_plot, () => distribution_details.html());\n",
              "    add_tooltip(options, num_examples, () => 'Number of examples');\n",
              "\n",
              "    output.vertical_offset += 10;\n",
              "    return;\n",
              "  }\n",
              "\n",
              "  if (value.type === 'REGRESSION') {\n",
              "    display_node_text(\n",
              "        options,\n",
              "        'value: ' + d3.format('r')(value.value) + ` (` +\n",
              "            d3.format('.6')(value.num_examples) + `)`,\n",
              "        output);\n",
              "    return;\n",
              "  }\n",
              "\n",
              "  display_node_text(options, `Non supported value ${value.type}`, output);\n",
              "}\n",
              "\n",
              "/**\n",
              " * Adds an explanation inside of a node.\n",
              " * @param {!options} options Dictionary of configurations.\n",
              " * @param {!explanation} explanation Explanation to display.\n",
              " * @param {!output} output Output display accumulator.\n",
              " */\n",
              "function display_explanation(options, explanation, output) {\n",
              "  // Margin before the explanation.\n",
              "  output.vertical_offset += 10;\n",
              "\n",
              "  display_node_text(\n",
              "      options, `Non supported explanation ${explanation.type}`, output);\n",
              "}\n",
              "\n",
              "\n",
              "/**\n",
              " * Draw the edges of the tree.\n",
              " * @param {!options} options Dictionary of configurations.\n",
              " * @param {!graph} graph D3 search handle containing the graph.\n",
              " * @param {!tree_struct} tree_struct Structure of the tree (node placement,\n",
              " *     data, etc.).\n",
              " */\n",
              "function display_edges(options, graph, tree_struct) {\n",
              "  // Draw an edge between a parent and a child node with a bezier.\n",
              "  function draw_single_edge(d) {\n",
              "    return 'M' + (d.source.y + options.node_x_size) + ',' + d.source.x + ' C' +\n",
              "        (d.source.y + options.node_x_size + options.edge_rounding) + ',' +\n",
              "        d.source.x + ' ' + (d.target.y - options.edge_rounding) + ',' +\n",
              "        d.target.x + ' ' + d.target.y + ',' + d.target.x;\n",
              "  }\n",
              "\n",
              "  graph.append('g')\n",
              "      .attr('fill', 'none')\n",
              "      .attr('stroke-width', 1.2)\n",
              "      .selectAll('path')\n",
              "      .data(tree_struct.links())\n",
              "      .join('path')\n",
              "      .attr('d', draw_single_edge)\n",
              "      .attr(\n",
              "          'stroke', d => (d.target === d.source.children[0]) ? '#0F0' : '#F00');\n",
              "}\n",
              "\n",
              "display_tree({\"margin\": 10, \"node_x_size\": 160, \"node_y_size\": 28, \"node_x_offset\": 180, \"node_y_offset\": 33, \"font_size\": 10, \"edge_rounding\": 20, \"node_padding\": 2, \"show_plot_bounding_box\": false}, {\"value\": {\"type\": \"PROBABILITY\", \"distribution\": [0.8662157083803081, 0.13378429161969185], \"num_examples\": 2661.0}, \"condition\": {\"type\": \"CATEGORICAL_IS_IN\", \"attribute\": \"International_plan\", \"mask\": [\"Yes\"]}, \"children\": [{\"value\": {\"type\": \"PROBABILITY\", \"distribution\": [0.6104868913857678, 0.3895131086142322], \"num_examples\": 267.0}, \"condition\": {\"type\": \"CATEGORICAL_IS_IN\", \"attribute\": \"State\", \"mask\": [\"MN\", \"NY\", \"WY\", \"NV\", \"MD\", \"CT\", \"CO\", \"MI\", \"NC\", \"TX\", \"OK\", \"MA\", \"MO\", \"KS\", \"DE\", \"NJ\", \"SC\", \"ME\", \"GA\", \"RI\", \"MS\", \"AZ\", \"NH\", \"KY\", \"AK\", \"PA\"]}, \"children\": [{\"value\": {\"type\": \"PROBABILITY\", \"distribution\": [0.4117647058823529, 0.5882352941176471], \"num_examples\": 153.0}, \"condition\": {\"type\": \"NUMERICAL_IS_HIGHER_THAN\", \"attribute\": \"Total_eve_charge\", \"threshold\": 14.130000114440918}, \"children\": [{\"value\": {\"type\": \"PROBABILITY\", \"distribution\": [0.3302752293577982, 0.6697247706422018], \"num_examples\": 109.0}, \"condition\": {\"type\": \"NUMERICAL_IS_HIGHER_THAN\", \"attribute\": \"Total_intl_minutes\", \"threshold\": 12.950000762939453}}, {\"value\": {\"type\": \"PROBABILITY\", \"distribution\": [0.6136363636363636, 0.38636363636363635], \"num_examples\": 44.0}, \"condition\": {\"type\": \"CATEGORICAL_IS_IN\", \"attribute\": \"State\", \"mask\": [\"MN\", \"DE\", \"NJ\", \"MS\", \"AZ\"]}}]}, {\"value\": {\"type\": \"PROBABILITY\", \"distribution\": [0.8771929824561403, 0.12280701754385964], \"num_examples\": 114.0}, \"condition\": {\"type\": \"NUMERICAL_IS_HIGHER_THAN\", \"attribute\": \"Total_intl_charge\", \"threshold\": 3.4549999237060547}, \"children\": [{\"value\": {\"type\": \"PROBABILITY\", \"distribution\": [0.1, 0.9], \"num_examples\": 10.0}, \"condition\": {\"type\": \"CATEGORICAL_IS_IN\", \"attribute\": \"State\", \"mask\": [\"VA\", \"OH\", \"FL\"]}}, {\"value\": {\"type\": \"PROBABILITY\", \"distribution\": [0.9519230769230769, 0.04807692307692308], \"num_examples\": 104.0}, \"condition\": {\"type\": \"NUMERICAL_IS_HIGHER_THAN\", \"attribute\": \"Total_night_calls\", \"threshold\": 77.5}}]}]}, {\"value\": {\"type\": \"PROBABILITY\", \"distribution\": [0.8947368421052632, 0.10526315789473684], \"num_examples\": 2394.0}, \"condition\": {\"type\": \"NUMERICAL_IS_HIGHER_THAN\", \"attribute\": \"Total_day_charge\", \"threshold\": 43.58000183105469}, \"children\": [{\"value\": {\"type\": \"PROBABILITY\", \"distribution\": [0.5053191489361702, 0.4946808510638298], \"num_examples\": 188.0}, \"condition\": {\"type\": \"NUMERICAL_IS_HIGHER_THAN\", \"attribute\": \"Total_night_charge\", \"threshold\": 6.099999904632568}, \"children\": [{\"value\": {\"type\": \"PROBABILITY\", \"distribution\": [0.4240506329113924, 0.5759493670886076], \"num_examples\": 158.0}, \"condition\": {\"type\": \"NUMERICAL_IS_HIGHER_THAN\", \"attribute\": \"Total_eve_calls\", \"threshold\": 95.5}}, {\"value\": {\"type\": \"PROBABILITY\", \"distribution\": [0.9333333333333333, 0.06666666666666667], \"num_examples\": 30.0}, \"condition\": {\"type\": \"NUMERICAL_IS_HIGHER_THAN\", \"attribute\": \"Account_length\", \"threshold\": 126.0}}]}, {\"value\": {\"type\": \"PROBABILITY\", \"distribution\": [0.9279238440616501, 0.07207615593834996], \"num_examples\": 2206.0}, \"condition\": {\"type\": \"CATEGORICAL_IS_IN\", \"attribute\": \"State\", \"mask\": [\"WV\", \"NY\", \"OR\", \"WI\", \"NV\", \"MD\", \"UT\", \"MI\", \"TX\", \"IN\", \"FL\", \"MT\", \"KS\", \"DE\", \"NJ\", \"SC\", \"MS\", \"AR\", \"NE\", \"NM\", \"ND\", \"DC\", \"NH\", \"KY\", \"IA\", \"PA\", \"CA\"]}, \"children\": [{\"value\": {\"type\": \"PROBABILITY\", \"distribution\": [0.889273356401384, 0.11072664359861592], \"num_examples\": 1156.0}, \"condition\": {\"type\": \"NUMERICAL_IS_HIGHER_THAN\", \"attribute\": \"Total_night_charge\", \"threshold\": 6.734999656677246}}, {\"value\": {\"type\": \"PROBABILITY\", \"distribution\": [0.9704761904761905, 0.029523809523809525], \"num_examples\": 1050.0}, \"condition\": {\"type\": \"CATEGORICAL_IS_IN\", \"attribute\": \"State\", \"mask\": [\"MN\", \"VA\", \"AL\", \"OH\", \"CT\", \"CO\", \"VT\", \"NC\", \"ID\", \"SD\", \"ME\", \"GA\", \"WA\", \"AZ\", \"HI\", \"AK\", \"TN\", \"LA\"]}}]}]}]}, \"#tree_plot_88c451663f654359ab84d61080ee1be0\")\n",
              "</script>\n"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "model.compile(metrics=[\"accuracy\"])\n",
        "evaluation = model.evaluate(test_ds, return_dict=True)\n",
        "print() \n",
        "for name, value in evaluation.items(): \n",
        "  print(f\"{name}: {value:.4f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WIYwajJG-IV5",
        "outputId": "2f4a35f2-b26b-4e60-8416-57838ed17cff"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 [==============================] - 1s 1s/step - loss: 0.0000e+00 - accuracy: 0.9370\n",
            "\n",
            "loss: 0.0000\n",
            "accuracy: 0.9370\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Uploading Prediction dataset file\n",
        "df_pred = pd.read_csv('https://raw.githubusercontent.com/ABKevin/Customer-churn-dataset/main/churn_predict.csv')\n",
        "df_pred.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 305
        },
        "id": "vP2SuYge-1M1",
        "outputId": "2f6eed73-19f6-4ffd-9c75-38bdecf9ec81"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  State  Account length  Area code International plan Voice mail plan  \\\n",
              "0    AR              76        408                 No              No   \n",
              "1    UT             100        408                 No              No   \n",
              "2    DC              99        415                 No             Yes   \n",
              "3    OH             106        415                 No             Yes   \n",
              "4    KS             170        415                 No             Yes   \n",
              "\n",
              "   Number vmail messages  Total day minutes  Total day calls  \\\n",
              "0                      0              107.3              140   \n",
              "1                      0              185.0              122   \n",
              "2                     31              244.1               71   \n",
              "3                     30              220.1              105   \n",
              "4                     42              199.5              119   \n",
              "\n",
              "   Total day charge  Total eve minutes  Total eve calls  Total eve charge  \\\n",
              "0             18.24              238.2              133             20.25   \n",
              "1             31.45              182.5               92             15.51   \n",
              "2             41.50              203.4               58             17.29   \n",
              "3             37.42              222.2              109             18.89   \n",
              "4             33.92              135.0               90             11.48   \n",
              "\n",
              "   Total night minutes  Total night calls  Total night charge  \\\n",
              "0                271.8                116               12.23   \n",
              "1                274.9                 92               12.37   \n",
              "2                234.0                115               10.53   \n",
              "3                158.4                 96                7.13   \n",
              "4                184.6                 49                8.31   \n",
              "\n",
              "   Total intl minutes  Total intl calls  Total intl charge  \\\n",
              "0                10.0                 3               2.70   \n",
              "1                 5.1                 8               1.38   \n",
              "2                 7.7                 4               2.08   \n",
              "3                13.1                 8               3.54   \n",
              "4                10.9                 3               2.94   \n",
              "\n",
              "   Customer service calls  Churn  \n",
              "0                       4   True  \n",
              "1                       1  False  \n",
              "2                       3   True  \n",
              "3                       0   True  \n",
              "4                       4  False  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-52fc1f07-6e99-4928-8444-5e5cb7c70d5e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>State</th>\n",
              "      <th>Account length</th>\n",
              "      <th>Area code</th>\n",
              "      <th>International plan</th>\n",
              "      <th>Voice mail plan</th>\n",
              "      <th>Number vmail messages</th>\n",
              "      <th>Total day minutes</th>\n",
              "      <th>Total day calls</th>\n",
              "      <th>Total day charge</th>\n",
              "      <th>Total eve minutes</th>\n",
              "      <th>Total eve calls</th>\n",
              "      <th>Total eve charge</th>\n",
              "      <th>Total night minutes</th>\n",
              "      <th>Total night calls</th>\n",
              "      <th>Total night charge</th>\n",
              "      <th>Total intl minutes</th>\n",
              "      <th>Total intl calls</th>\n",
              "      <th>Total intl charge</th>\n",
              "      <th>Customer service calls</th>\n",
              "      <th>Churn</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>AR</td>\n",
              "      <td>76</td>\n",
              "      <td>408</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>107.3</td>\n",
              "      <td>140</td>\n",
              "      <td>18.24</td>\n",
              "      <td>238.2</td>\n",
              "      <td>133</td>\n",
              "      <td>20.25</td>\n",
              "      <td>271.8</td>\n",
              "      <td>116</td>\n",
              "      <td>12.23</td>\n",
              "      <td>10.0</td>\n",
              "      <td>3</td>\n",
              "      <td>2.70</td>\n",
              "      <td>4</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>UT</td>\n",
              "      <td>100</td>\n",
              "      <td>408</td>\n",
              "      <td>No</td>\n",
              "      <td>No</td>\n",
              "      <td>0</td>\n",
              "      <td>185.0</td>\n",
              "      <td>122</td>\n",
              "      <td>31.45</td>\n",
              "      <td>182.5</td>\n",
              "      <td>92</td>\n",
              "      <td>15.51</td>\n",
              "      <td>274.9</td>\n",
              "      <td>92</td>\n",
              "      <td>12.37</td>\n",
              "      <td>5.1</td>\n",
              "      <td>8</td>\n",
              "      <td>1.38</td>\n",
              "      <td>1</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>DC</td>\n",
              "      <td>99</td>\n",
              "      <td>415</td>\n",
              "      <td>No</td>\n",
              "      <td>Yes</td>\n",
              "      <td>31</td>\n",
              "      <td>244.1</td>\n",
              "      <td>71</td>\n",
              "      <td>41.50</td>\n",
              "      <td>203.4</td>\n",
              "      <td>58</td>\n",
              "      <td>17.29</td>\n",
              "      <td>234.0</td>\n",
              "      <td>115</td>\n",
              "      <td>10.53</td>\n",
              "      <td>7.7</td>\n",
              "      <td>4</td>\n",
              "      <td>2.08</td>\n",
              "      <td>3</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>OH</td>\n",
              "      <td>106</td>\n",
              "      <td>415</td>\n",
              "      <td>No</td>\n",
              "      <td>Yes</td>\n",
              "      <td>30</td>\n",
              "      <td>220.1</td>\n",
              "      <td>105</td>\n",
              "      <td>37.42</td>\n",
              "      <td>222.2</td>\n",
              "      <td>109</td>\n",
              "      <td>18.89</td>\n",
              "      <td>158.4</td>\n",
              "      <td>96</td>\n",
              "      <td>7.13</td>\n",
              "      <td>13.1</td>\n",
              "      <td>8</td>\n",
              "      <td>3.54</td>\n",
              "      <td>0</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>KS</td>\n",
              "      <td>170</td>\n",
              "      <td>415</td>\n",
              "      <td>No</td>\n",
              "      <td>Yes</td>\n",
              "      <td>42</td>\n",
              "      <td>199.5</td>\n",
              "      <td>119</td>\n",
              "      <td>33.92</td>\n",
              "      <td>135.0</td>\n",
              "      <td>90</td>\n",
              "      <td>11.48</td>\n",
              "      <td>184.6</td>\n",
              "      <td>49</td>\n",
              "      <td>8.31</td>\n",
              "      <td>10.9</td>\n",
              "      <td>3</td>\n",
              "      <td>2.94</td>\n",
              "      <td>4</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-52fc1f07-6e99-4928-8444-5e5cb7c70d5e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-52fc1f07-6e99-4928-8444-5e5cb7c70d5e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-52fc1f07-6e99-4928-8444-5e5cb7c70d5e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_pred.dtypes"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "U4YfQ6XjXnUG",
        "outputId": "e4e899f4-525a-4b34-c8ec-4648e994e4a1"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "State                      object\n",
              "Account length              int64\n",
              "Area code                   int64\n",
              "International plan         object\n",
              "Voice mail plan            object\n",
              "Number vmail messages       int64\n",
              "Total day minutes         float64\n",
              "Total day calls             int64\n",
              "Total day charge          float64\n",
              "Total eve minutes         float64\n",
              "Total eve calls             int64\n",
              "Total eve charge          float64\n",
              "Total night minutes       float64\n",
              "Total night calls           int64\n",
              "Total night charge        float64\n",
              "Total intl minutes        float64\n",
              "Total intl calls            int64\n",
              "Total intl charge         float64\n",
              "Customer service calls      int64\n",
              "Churn                        bool\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_pred.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bsT1ZZQEXpkm",
        "outputId": "07d17f05-b21f-4e2b-a26f-2e069895bbcf"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "State                     0\n",
              "Account length            0\n",
              "Area code                 0\n",
              "International plan        0\n",
              "Voice mail plan           0\n",
              "Number vmail messages     0\n",
              "Total day minutes         0\n",
              "Total day calls           0\n",
              "Total day charge          0\n",
              "Total eve minutes         0\n",
              "Total eve calls           0\n",
              "Total eve charge          0\n",
              "Total night minutes       0\n",
              "Total night calls         0\n",
              "Total night charge        0\n",
              "Total intl minutes        0\n",
              "Total intl calls          0\n",
              "Total intl charge         0\n",
              "Customer service calls    0\n",
              "Churn                     0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_pred.describe().T"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 551
        },
        "id": "lX4QNgHeX2t0",
        "outputId": "774bc1bd-05f4-48d8-d4a1-a0f86dae6045"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                        count     mean        std     min     25%     50%  \\\n",
              "Account length            5.0  110.200  35.329874   76.00   99.00  100.00   \n",
              "Area code                 5.0  412.200   3.834058  408.00  408.00  415.00   \n",
              "Number vmail messages     5.0   20.600  19.385562    0.00    0.00   30.00   \n",
              "Total day minutes         5.0  191.200  51.913775  107.30  185.00  199.50   \n",
              "Total day calls           5.0  111.400  25.793410   71.00  105.00  119.00   \n",
              "Total day charge          5.0   32.506   8.827128   18.24   31.45   33.92   \n",
              "Total eve minutes         5.0  196.260  40.077899  135.00  182.50  203.40   \n",
              "Total eve calls           5.0   96.400  27.537248   58.00   90.00   92.00   \n",
              "Total eve charge          5.0   16.684   3.406241   11.48   15.51   17.29   \n",
              "Total night minutes       5.0  224.740  52.030357  158.40  184.60  234.00   \n",
              "Total night calls         5.0   93.600  27.190072   49.00   92.00   96.00   \n",
              "Total night charge        5.0   10.114   2.339803    7.13    8.31   10.53   \n",
              "Total intl minutes        5.0    9.360   3.068876    5.10    7.70   10.00   \n",
              "Total intl calls          5.0    5.200   2.588436    3.00    3.00    4.00   \n",
              "Total intl charge         5.0    2.528   0.827961    1.38    2.08    2.70   \n",
              "Customer service calls    5.0    2.400   1.816590    0.00    1.00    3.00   \n",
              "\n",
              "                           75%     max  \n",
              "Account length          106.00  170.00  \n",
              "Area code               415.00  415.00  \n",
              "Number vmail messages    31.00   42.00  \n",
              "Total day minutes       220.10  244.10  \n",
              "Total day calls         122.00  140.00  \n",
              "Total day charge         37.42   41.50  \n",
              "Total eve minutes       222.20  238.20  \n",
              "Total eve calls         109.00  133.00  \n",
              "Total eve charge         18.89   20.25  \n",
              "Total night minutes     271.80  274.90  \n",
              "Total night calls       115.00  116.00  \n",
              "Total night charge       12.23   12.37  \n",
              "Total intl minutes       10.90   13.10  \n",
              "Total intl calls          8.00    8.00  \n",
              "Total intl charge         2.94    3.54  \n",
              "Customer service calls    4.00    4.00  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5321e992-e580-48b3-ab6d-c3278104920f\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "      <th>mean</th>\n",
              "      <th>std</th>\n",
              "      <th>min</th>\n",
              "      <th>25%</th>\n",
              "      <th>50%</th>\n",
              "      <th>75%</th>\n",
              "      <th>max</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Account length</th>\n",
              "      <td>5.0</td>\n",
              "      <td>110.200</td>\n",
              "      <td>35.329874</td>\n",
              "      <td>76.00</td>\n",
              "      <td>99.00</td>\n",
              "      <td>100.00</td>\n",
              "      <td>106.00</td>\n",
              "      <td>170.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Area code</th>\n",
              "      <td>5.0</td>\n",
              "      <td>412.200</td>\n",
              "      <td>3.834058</td>\n",
              "      <td>408.00</td>\n",
              "      <td>408.00</td>\n",
              "      <td>415.00</td>\n",
              "      <td>415.00</td>\n",
              "      <td>415.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Number vmail messages</th>\n",
              "      <td>5.0</td>\n",
              "      <td>20.600</td>\n",
              "      <td>19.385562</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>30.00</td>\n",
              "      <td>31.00</td>\n",
              "      <td>42.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Total day minutes</th>\n",
              "      <td>5.0</td>\n",
              "      <td>191.200</td>\n",
              "      <td>51.913775</td>\n",
              "      <td>107.30</td>\n",
              "      <td>185.00</td>\n",
              "      <td>199.50</td>\n",
              "      <td>220.10</td>\n",
              "      <td>244.10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Total day calls</th>\n",
              "      <td>5.0</td>\n",
              "      <td>111.400</td>\n",
              "      <td>25.793410</td>\n",
              "      <td>71.00</td>\n",
              "      <td>105.00</td>\n",
              "      <td>119.00</td>\n",
              "      <td>122.00</td>\n",
              "      <td>140.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Total day charge</th>\n",
              "      <td>5.0</td>\n",
              "      <td>32.506</td>\n",
              "      <td>8.827128</td>\n",
              "      <td>18.24</td>\n",
              "      <td>31.45</td>\n",
              "      <td>33.92</td>\n",
              "      <td>37.42</td>\n",
              "      <td>41.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Total eve minutes</th>\n",
              "      <td>5.0</td>\n",
              "      <td>196.260</td>\n",
              "      <td>40.077899</td>\n",
              "      <td>135.00</td>\n",
              "      <td>182.50</td>\n",
              "      <td>203.40</td>\n",
              "      <td>222.20</td>\n",
              "      <td>238.20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Total eve calls</th>\n",
              "      <td>5.0</td>\n",
              "      <td>96.400</td>\n",
              "      <td>27.537248</td>\n",
              "      <td>58.00</td>\n",
              "      <td>90.00</td>\n",
              "      <td>92.00</td>\n",
              "      <td>109.00</td>\n",
              "      <td>133.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Total eve charge</th>\n",
              "      <td>5.0</td>\n",
              "      <td>16.684</td>\n",
              "      <td>3.406241</td>\n",
              "      <td>11.48</td>\n",
              "      <td>15.51</td>\n",
              "      <td>17.29</td>\n",
              "      <td>18.89</td>\n",
              "      <td>20.25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Total night minutes</th>\n",
              "      <td>5.0</td>\n",
              "      <td>224.740</td>\n",
              "      <td>52.030357</td>\n",
              "      <td>158.40</td>\n",
              "      <td>184.60</td>\n",
              "      <td>234.00</td>\n",
              "      <td>271.80</td>\n",
              "      <td>274.90</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Total night calls</th>\n",
              "      <td>5.0</td>\n",
              "      <td>93.600</td>\n",
              "      <td>27.190072</td>\n",
              "      <td>49.00</td>\n",
              "      <td>92.00</td>\n",
              "      <td>96.00</td>\n",
              "      <td>115.00</td>\n",
              "      <td>116.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Total night charge</th>\n",
              "      <td>5.0</td>\n",
              "      <td>10.114</td>\n",
              "      <td>2.339803</td>\n",
              "      <td>7.13</td>\n",
              "      <td>8.31</td>\n",
              "      <td>10.53</td>\n",
              "      <td>12.23</td>\n",
              "      <td>12.37</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Total intl minutes</th>\n",
              "      <td>5.0</td>\n",
              "      <td>9.360</td>\n",
              "      <td>3.068876</td>\n",
              "      <td>5.10</td>\n",
              "      <td>7.70</td>\n",
              "      <td>10.00</td>\n",
              "      <td>10.90</td>\n",
              "      <td>13.10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Total intl calls</th>\n",
              "      <td>5.0</td>\n",
              "      <td>5.200</td>\n",
              "      <td>2.588436</td>\n",
              "      <td>3.00</td>\n",
              "      <td>3.00</td>\n",
              "      <td>4.00</td>\n",
              "      <td>8.00</td>\n",
              "      <td>8.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Total intl charge</th>\n",
              "      <td>5.0</td>\n",
              "      <td>2.528</td>\n",
              "      <td>0.827961</td>\n",
              "      <td>1.38</td>\n",
              "      <td>2.08</td>\n",
              "      <td>2.70</td>\n",
              "      <td>2.94</td>\n",
              "      <td>3.54</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Customer service calls</th>\n",
              "      <td>5.0</td>\n",
              "      <td>2.400</td>\n",
              "      <td>1.816590</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>3.00</td>\n",
              "      <td>4.00</td>\n",
              "      <td>4.00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5321e992-e580-48b3-ab6d-c3278104920f')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-5321e992-e580-48b3-ab6d-c3278104920f button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-5321e992-e580-48b3-ab6d-c3278104920f');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "pred_ds = tfdf.keras.pd_dataframe_to_tf_dataset(df_pred, label=\"Churn\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "x7BaHlgfAY7o",
        "outputId": "490f5468-b9fa-49e9-e3ec-345ff6c2f545"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Warning: Some of the feature names have been changed automatically to be compatible with SavedModels because fix_feature_names=True.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:absl:Some of the feature names have been changed automatically to be compatible with SavedModels because fix_feature_names=True.\n",
            "/usr/local/lib/python3.8/dist-packages/tensorflow_decision_forests/keras/core.py:2574: FutureWarning: In a future version of pandas all arguments of DataFrame.drop except for the argument 'labels' will be keyword-only\n",
            "  features_dataframe = dataframe.drop(label, 1)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "result_df = pd.DataFrame(model.predict(pred_ds, verbose=0)[:5])\n",
        "result_df[\"prediction\"] = result_df[0].apply(lambda x: True if x >= .50 else False)"
      ],
      "metadata": {
        "id": "l8yDSOSuCn9V"
      },
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "result_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "7rgMOOoLCqza",
        "outputId": "6d5cc65e-d957-47a9-cbef-91f6707bad30"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "          0  prediction\n",
              "0  0.833333        True\n",
              "1  0.013333       False\n",
              "2  0.040000       False\n",
              "3  0.043333       False\n",
              "4  0.246667       False"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-dbaa54d8-326a-48c7-aec0-baf608baf39a\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>prediction</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.833333</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.013333</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.040000</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.043333</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.246667</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dbaa54d8-326a-48c7-aec0-baf608baf39a')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-dbaa54d8-326a-48c7-aec0-baf608baf39a button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-dbaa54d8-326a-48c7-aec0-baf608baf39a');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    }
  ]
}